<haxe>
	<class path="reflect.MetadataAware" params="" file="construct/src_reflect/reflect/MetadataAware.hx" interface="1"><hasMetadata public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></hasMetadata></class>
	<class path="hsl.haxe.Bond" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/Bond.hx">
		<halted public="1" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Indicates whether the bond has been halted (true) or not (false). See the halt method for more information.
	 </haxe_doc>
		</halted>
		<willDestroyOnUse>
			<e path="Bool"/>
			<haxe_doc>
	 * Indicates whether the bond will be destroyed right after it is used (true) or not (false).
	 </haxe_doc>
		</willDestroyOnUse>
		<destroy public="1" set="method" line="58">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Destroys the bond. The signaler that created this bond will no longer notify listeners through it. Bond cannot be
	 * "undestroyed". To temporary suspend the bond from notifying the associated listener, use the halt method.
	 </haxe_doc>
		</destroy>
		<destroyOnUse public="1" set="method" line="65">
			<f a=""><c path="hsl.haxe.Bond"/></f>
			<haxe_doc>
	 * Destroys the bond right after it is used. Whether this bond has already been used at the moment this method is called does
	 * not matter: the bond will be destroyed on its first use after this method has been called. This method returns this bond
	 * itself.
	 </haxe_doc>
		</destroyOnUse>
		<halt public="1" get="inline" set="null" line="73">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Halts the bond. The bond will ignore any calls, and will not notify any listeners, until the resume method is called. If
	 * the bond was already halted, calling this method has no effect.
	 </haxe_doc>
		</halt>
		<resume public="1" get="inline" set="null" line="80">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Resumes the bond, after it has been halted by calling the halt method. If the bond was not halted, calling this method has
	 * no effect. See the halt method for more information.
	 </haxe_doc>
		</resume>
		<new public="1" set="method" line="48">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Creates a new bond.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * A bond represents the connection between a signaler and a listener. Bonds are created when listeners add themselves to a
 * signaler.
 * 
 * Bonds are used internally, and can be ignored in common cases. However, sometimes it is useful for listeners to store the
 * bond in a variable. Doing so allows you to halt and resume the bond, and destroy it easily.
 </haxe_doc>
	</class>
	<class path="haxe.exception.Exception" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/haxe/exception/Exception.hx">
		<baseException public="1" get="getBaseException" set="null">
			<c path="haxe.exception.Exception"/>
			<haxe_doc>
	 * The initial exception that triggered the chain of exceptions resulting in this exception to be thrown. If this exception
	 * does not have any inner exceptions, this property is equal to this exception.
	 </haxe_doc>
		</baseException>
		<innerException public="1" set="null">
			<c path="haxe.exception.Exception"/>
			<haxe_doc>
	 * The exception that was thrown causing this exception to be thrown. If this exception does not have any inner exceptions,
	 * this property is null.
	 </haxe_doc>
		</innerException>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>
	 * The message associated with and describing this exception.
	 </haxe_doc>
		</message>
		<stackTrace public="1" set="null">
			<t path="Iterable"><e path="haxe.StackItem"/></t>
			<haxe_doc>
	 * The trace to the place where this exception was generated and thrown.
	 </haxe_doc>
		</stackTrace>
		<stackTraceArray>
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>
	 * The same as the stackTrace property, only more accurately typed.
	 </haxe_doc>
		</stackTraceArray>
		<generateStackTrace get="inline" set="null" line="77">
			<f a="numberOfStackTraceShifts">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Generates the stacktrace. Is called in the constructor of this class. Calling this from somewhere else will result in a
	 * corrupted stacktrace.
	 </haxe_doc>
		</generateStackTrace>
		<getBaseException get="inline" set="null" line="90">
			<f a=""><c path="haxe.exception.Exception"/></f>
			<haxe_doc>
	 * Gets the base exception of this one.
	 </haxe_doc>
		</getBaseException>
		<toString set="method" line="97"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="60">
			<f a="?message:?innerException:?numberOfStackTraceShifts">
				<c path="String"/>
				<c path="haxe.exception.Exception"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new exception. Creating an exception automatically generates the corresponding stacktrace.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * General base class for exceptions.
 </haxe_doc>
	</class>
	<class path="haxe.exception.ArgumentNullException" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/haxe/exception/ArgumentNullException.hx">
		<extends path="haxe.exception.Exception"/>
		<new public="1" set="method" line="36">
			<f a="?argumentName:?numberOfStackTraceShifts">
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new argument null exception.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * An exception that can be thown when an argument is null, while a non-null value is expected.
 </haxe_doc>
	</class>
	<class path="haxe.Public" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/Public.hx" interface="1"><haxe_doc>
	When implementing this interface, all default fields access for the class and
	subclasses becomes [public] instead of [private].
</haxe_doc></class>
	<class path="haxe.unit.TestCase" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/unit/TestCase.hx">
		<implements path="haxe.Public"/>
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="34"><f a=""><e path="Void"/></f></setup>
		<tearDown public="1" set="method" line="37"><f a=""><e path="Void"/></f></tearDown>
		<print public="1" set="method" line="40"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="44"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="54"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="64"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="TestCase2" params="" file="construct/src_test/TestCase2.hx">
		<extends path="haxe.unit.TestCase"/>
		<assertNotNull public="1" set="method" line="8"><f a="b:?c">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNotNull>
		<assertNull public="1" set="method" line="18"><f a="b:?c">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertNull>
		<fail public="1" set="method" line="28"><f a="message:?c">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></fail>
		<noFail public="1" set="method" line="36"><f a=""><e path="Void"/></f></noFail>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.TestError" params="" file="construct/src_test/bpmjs/TestError.hx">
		<extends path="TestCase2"/>
		<testContextNotNull public="1" set="method" line="6"><f a=""><e path="Void"/></f></testContextNotNull>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestError.TestConfigWithoutRTTI" params="" file="construct/src_test/bpmjs/TestError.hx" private="1" module="bpmjs.TestError"/>
	<class path="Map" params="" file="construct/src_bpmgl/Map.hx">
		<linear public="1" set="method" line="3" static="1"><f a="value:min0:max0:min1:max1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></linear>
		<ease public="1" set="method" line="9" static="1"><f a="value:min0:max0:min1:max1:easeFunction">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a=":::">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></ease>
	</class>
	<class path="kumite.scene.SceneAndLifecycle" params="" file="construct/src/kumite/scene/SceneAndLifecycle.hx">
		<scene public="1"><c path="kumite.scene.Scene"/></scene>
		<lifecycle public="1"><c path="kumite.scene.SceneLifecycle"/></lifecycle>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="js.HtmlCollection" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom" extern="1">
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_dynamic><c path="js.HtmlCollection.T"/></haxe_dynamic>
	</class>
	<typedef path="js.MetaDom" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<replaceChild set="method"><f a="child:oldChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
</f></removeChild>
	<previousSibling><c path="js.MetaDom.T"/></previousSibling>
	<parentNode><c path="js.MetaDom.T"/></parentNode>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><c path="js.MetaDom.T"/></nextSibling>
	<lastChild><c path="js.MetaDom.T"/></lastChild>
	<insertBefore set="method"><f a="newChild:refChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<firstChild><c path="js.MetaDom.T"/></firstChild>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<c path="js.MetaDom.T"/>
</f></cloneNode>
	<childNodes><c path="js.HtmlCollection"><c path="js.MetaDom.T"/></c></childNodes>
	<appendChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Dom" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx"><t path="js.MetaDom"><t path="js.Dom"/></t></typedef>
	<typedef path="js.HtmlDom" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.FormElement" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Anchor" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<accessKey><c path="String"/></accessKey>
</a></typedef>
	<typedef path="js.Body" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<vLink><c path="String"/></vLink>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<link><c path="String"/></link>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><c path="String"/></bgColor>
	<background><c path="String"/></background>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<aLink><c path="String"/></aLink>
</a></typedef>
	<typedef path="js.Button" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Checkbox" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Document" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<writeln set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></writeln>
	<write set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></write>
	<title><c path="String"/></title>
	<styleSheets><c path="js.HtmlCollection"><t path="js.StyleSheet"/></c></styleSheets>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<referrer><c path="String"/></referrer>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<open set="method"><f a=""><e path="Void"/></f></open>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<links><c path="js.HtmlCollection"><t path="js.Link"/></c></links>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<images><c path="js.HtmlCollection"><t path="js.Image"/></c></images>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getElementsByTag set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTag>
	<getElementsByName set="method"><f a="name">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByName>
	<getElementById set="method"><f a="id">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></getElementById>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<forms><c path="js.HtmlCollection"><t path="js.Form"/></c></forms>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<domain><c path="String"/></domain>
	<dir><c path="String"/></dir>
	<createTextNode set="method"><f a="text">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createTextNode>
	<createElement set="method"><f a="name">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createElement>
	<cookie><c path="String"/></cookie>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<body><t path="js.Body"/></body>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<anchors><c path="js.HtmlCollection"><t path="js.Anchor"/></c></anchors>
</a></typedef>
	<typedef path="js.Event" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<target><t path="js.HtmlDom"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<shiftKey><e path="Bool"/></shiftKey>
	<screenY><c path="Int"/></screenY>
	<screenX><c path="Int"/></screenX>
	<keyCode><c path="Int"/></keyCode>
	<ctrlKey><e path="Bool"/></ctrlKey>
	<clientY><c path="Int"/></clientY>
	<clientX><c path="Int"/></clientX>
	<cancelBubble><e path="Bool"/></cancelBubble>
	<button><c path="Int"/></button>
	<altKey><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="js.FileUpload" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Form" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<submit set="method"><f a=""><e path="Void"/></f></submit>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<reset set="method"><f a=""><e path="Void"/></f></reset>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onsubmit><f a="">
	<t path="js.Event"/>
	<e path="Bool"/>
</f></onsubmit>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onreset><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onreset>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<method><c path="String"/></method>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<enctype><c path="String"/></enctype>
	<encoding><c path="String"/></encoding>
	<elements><c path="js.HtmlCollection"><t path="js.FormElement"/></c></elements>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<action><c path="String"/></action>
	<acceptCharset><c path="String"/></acceptCharset>
</a></typedef>
	<typedef path="js.Frame" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<noResize><e path="Bool"/></noResize>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentDocument><t path="js.Document"/></contentDocument>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Frameset" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Hidden" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.History" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<length><c path="Int"/></length>
	<go set="method"><f a="p">
	<d/>
	<e path="Void"/>
</f></go>
	<forward set="method"><f a=""><e path="Void"/></f></forward>
	<back set="method"><f a=""><e path="Void"/></f></back>
</a></typedef>
	<typedef path="js.IFrame" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentWindow><t path="js.Window"/></contentWindow>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Image" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><c path="String"/></useMap>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<onabort><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onabort>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lowsrc><c path="String"/></lowsrc>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<isMap><e path="Bool"/></isMap>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hspace><c path="Int"/></hspace>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<complete><e path="Bool"/></complete>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<border><c path="String"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<alt><c path="String"/></alt>
	<align><c path="String"/></align>
</a></typedef>
	<typedef path="js.Link" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<media><c path="String"/></media>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hreflang><c path="String"/></hreflang>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<charset><c path="String"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Location" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<search><c path="String"/></search>
	<replace set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></replace>
	<reload set="method"><f a="?forceReload">
	<e path="Bool"/>
	<e path="Void"/>
</f></reload>
	<protocol><c path="String"/></protocol>
	<port><c path="Int"/></port>
	<pathname><c path="String"/></pathname>
	<href><c path="String"/></href>
	<hostname><c path="String"/></hostname>
	<host><c path="String"/></host>
	<hash><c path="String"/></hash>
	<assign set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></assign>
</a></typedef>
	<typedef path="js.Navigator" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<userAgent><c path="String"/></userAgent>
	<taintEnabled set="method"><f a=""><e path="Bool"/></f></taintEnabled>
	<platform><c path="String"/></platform>
	<javaEnabled set="method"><f a=""><e path="Bool"/></f></javaEnabled>
	<cookieEnabled><e path="Bool"/></cookieEnabled>
	<appVersion><c path="String"/></appVersion>
	<appName><c path="String"/></appName>
	<appCodeName><c path="String"/></appCodeName>
</a></typedef>
	<typedef path="js.Option" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selected><e path="Bool"/></selected>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultSelected><e path="Bool"/></defaultSelected>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Password" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Radio" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Reset" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Screen" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<colorDepth><c path="Int"/></colorDepth>
	<availWidth><c path="Int"/></availWidth>
	<availHeight><c path="Int"/></availHeight>
</a></typedef>
	<typedef path="js.Select" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selectedIndex><c path="Int"/></selectedIndex>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<remove set="method"><f a="o">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<options><c path="js.HtmlCollection"><t path="js.Option"/></c></options>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<multiple><e path="Bool"/></multiple>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Style" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<zoom><d/></zoom>
	<zIndex><c path="Int"/></zIndex>
	<writingMode><d/></writingMode>
	<wordWrap><d/></wordWrap>
	<wordSpacing><d/></wordSpacing>
	<wordBreak><d/></wordBreak>
	<width><c path="String"/></width>
	<whiteSpace><d/></whiteSpace>
	<visibility><d/></visibility>
	<verticalAlign><d/></verticalAlign>
	<unicodeBidi><d/></unicodeBidi>
	<top><c path="String"/></top>
	<textUnderlinePosition><d/></textUnderlinePosition>
	<textTransform><d/></textTransform>
	<textShadow><d/></textShadow>
	<textOverflow><d/></textOverflow>
	<textKashidaSpace><d/></textKashidaSpace>
	<textJustifyTrim><d/></textJustifyTrim>
	<textJustify><d/></textJustify>
	<textIndent><d/></textIndent>
	<textDecorationLineUnderline><d/></textDecorationLineUnderline>
	<textDecorationLineThrough><d/></textDecorationLineThrough>
	<textDecorationLineOverline><d/></textDecorationLineOverline>
	<textDecorationLineNone><d/></textDecorationLineNone>
	<textDecorationBlink><d/></textDecorationBlink>
	<textDecoration><d/></textDecoration>
	<textAutospace><d/></textAutospace>
	<textAlignLast><d/></textAlignLast>
	<textAlign><d/></textAlign>
	<styleFloat><d/></styleFloat>
	<rubyPosition><d/></rubyPosition>
	<rubyOverhang><d/></rubyOverhang>
	<rubyAlign><d/></rubyAlign>
	<right><c path="String"/></right>
	<quotes><d/></quotes>
	<position><d/></position>
	<paddingTop><d/></paddingTop>
	<paddingRight><d/></paddingRight>
	<paddingLeft><d/></paddingLeft>
	<paddingBottom><d/></paddingBottom>
	<padding><d/></padding>
	<overflowY><d/></overflowY>
	<overflowX><d/></overflowX>
	<overflow><d/></overflow>
	<outlineWidth><d/></outlineWidth>
	<outlineStyle><d/></outlineStyle>
	<outlineColor><d/></outlineColor>
	<outline><d/></outline>
	<minWidth><d/></minWidth>
	<minHeight><d/></minHeight>
	<maxWidth><d/></maxWidth>
	<maxHeight><d/></maxHeight>
	<marks><d/></marks>
	<markerOffset><d/></markerOffset>
	<marginTop><d/></marginTop>
	<marginRight><d/></marginRight>
	<marginLeft><d/></marginLeft>
	<marginBottom><d/></marginBottom>
	<margin><d/></margin>
	<listStyleType><c path="String"/></listStyleType>
	<listStylePosition><d/></listStylePosition>
	<listStyleImage><d/></listStyleImage>
	<listStyle><d/></listStyle>
	<lineHeight><d/></lineHeight>
	<lineBreak><d/></lineBreak>
	<letterSpacing><d/></letterSpacing>
	<left><c path="String"/></left>
	<height><c path="String"/></height>
	<fontWeight><d/></fontWeight>
	<fontVariant><d/></fontVariant>
	<fontStyle><d/></fontStyle>
	<fontStretch><d/></fontStretch>
	<fontSizeAdjust><d/></fontSizeAdjust>
	<fontSize><d/></fontSize>
	<fontFamily><d/></fontFamily>
	<font><d/></font>
	<display><d/></display>
	<direction><d/></direction>
	<cursor><d/></cursor>
	<cssText><d/></cssText>
	<cssFloat><d/></cssFloat>
	<counterReset><d/></counterReset>
	<counterIncrement><d/></counterIncrement>
	<content><d/></content>
	<color><d/></color>
	<clipTop><d/></clipTop>
	<clipRight><d/></clipRight>
	<clipLeft><d/></clipLeft>
	<clipBottom><d/></clipBottom>
	<clip><d/></clip>
	<clear><c path="String"/></clear>
	<bottom><c path="String"/></bottom>
	<borderWidth><d/></borderWidth>
	<borderTopWidth><d/></borderTopWidth>
	<borderTopStyle><d/></borderTopStyle>
	<borderTopColor><d/></borderTopColor>
	<borderTop><d/></borderTop>
	<borderStyle><c path="String"/></borderStyle>
	<borderRightWidth><d/></borderRightWidth>
	<borderRightStyle><d/></borderRightStyle>
	<borderRightColor><d/></borderRightColor>
	<borderRight><d/></borderRight>
	<borderLeftWidth><d/></borderLeftWidth>
	<borderLeftStyle><d/></borderLeftStyle>
	<borderLeftColor><d/></borderLeftColor>
	<borderLeft><d/></borderLeft>
	<borderColor><d/></borderColor>
	<borderBottomWidth><d/></borderBottomWidth>
	<borderBottomStyle><d/></borderBottomStyle>
	<borderBottomColor><d/></borderBottomColor>
	<borderBottom><d/></borderBottom>
	<border><d/></border>
	<backgroundRepeat><d/></backgroundRepeat>
	<backgroundPosition><d/></backgroundPosition>
	<backgroundImage><d/></backgroundImage>
	<backgroundColor><d/></backgroundColor>
	<backgroundAttachment><d/></backgroundAttachment>
	<background><d/></background>
</a></typedef>
	<typedef path="js.StyleSheet" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<href><c path="String"/></href>
	<disabled><e path="Bool"/></disabled>
</a></typedef>
	<typedef path="js.Submit" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselectstart><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselectstart>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Text" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Textarea" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Window" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Dom.hx" module="js.Dom"><a>
	<top><t path="js.Window"/></top>
	<status><c path="String"/></status>
	<self><t path="js.Window"/></self>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<screen><t path="js.Screen"/></screen>
	<prompt set="method"><f a="msg:?def">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<parent><t path="js.Window"/></parent>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener><t path="js.Window"/></opener>
	<open set="method"><f a="url:?name:?features">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="js.Window"/>
</f></open>
	<onunload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onunload>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<navigator><t path="js.Navigator"/></navigator>
	<name><c path="String"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<location><t path="js.Location"/></location>
	<length><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history><t path="js.History"/></history>
	<frames><c path="js.HtmlCollection"><t path="js.Frame"/></c></frames>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<document><t path="js.Document"/></document>
	<defaultStatus><c path="String"/></defaultStatus>
	<confirm set="method"><f a="msg">
	<c path="String"/>
	<e path="Bool"/>
</f></confirm>
	<closed><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<alert set="method"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></alert>
</a></typedef>
	<class path="ArrayBufferView" params="" file="construct/src_extern/ArrayBufferView.hx" extern="1">
		<buffer public="1"><c path="ArrayBuffer"/></buffer>
		<byteLength public="1"><c path="Int"/></byteLength>
		<length public="1"><c path="Int"/></length>
		<set public="1" set="method"><f a="buffer:?offset">
	<c path="ArrayBufferView"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
	</class>
	<class path="Float32Array" params="" file="construct/src_extern/Float32Array.hx" extern="1">
		<extends path="ArrayBufferView"/>
		<new public="1" set="method"><f a="arrayOrLength">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.rtti.Infos" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/Infos.hx" interface="1"><haxe_doc>
	This is a magic interface. When a class implements [haxe.rtti.Infos], this class and all its
	subclass will get an additional static field [__rtti] storing the class type informations.
</haxe_doc></class>
	<class path="reflect.model.ClassB" params="" file="construct/src_test/reflect/model/ClassB.hx">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="5" static="1"><d/></__meta__>
		<__rtti public="1" line="5" static="1"><c path="String"/></__rtti>
		<c public="1"><c path="Int"/></c>
		<new public="1" set="method" line="10"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="reflect.model.ClassA" params="" file="construct/src_test/reflect/model/ClassA.hx">
		<extends path="reflect.model.ClassB"/>
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="4" static="1"><d/></__meta__>
		<__rtti public="1" line="4" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="Int"/></a>
		<b public="1"><e path="Bool"/></b>
		<f1 public="1" set="method" line="12"><f a="a">
	<c path="Int"/>
	<c path="Float"/>
</f></f1>
		<f2 set="method" line="17"><f a=""><e path="Void"/></f></f2>
		<new public="1" set="method" line="4"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="kumite.scene.LayerLifecycle" params="" file="construct/src/kumite/scene/LayerLifecycle.hx" interface="1">
		<init public="1" set="method"><f a=""><e path="Void"/></f></init>
		<render public="1" set="method"><f a="renderContext">
	<c path="kumite.scene.RenderContext"/>
	<e path="Void"/>
</f></render>
		<renderTransition public="1" set="method"><f a="transitionContext">
	<c path="kumite.scene.TransitionContext"/>
	<e path="Void"/>
</f></renderTransition>
	</class>
	<class path="String" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="bpmjs.TestMessenger" params="" file="construct/src_test/bpmjs/TestMessenger.hx">
		<extends path="haxe.unit.TestCase"/>
		<completeCount><c path="Int"/></completeCount>
		<setup public="1" set="method" line="9" override="1"><f a=""><e path="Void"/></f></setup>
		<testSingleMessage public="1" set="method" line="14"><f a=""><e path="Void"/></f></testSingleMessage>
		<testDoubleAddListener public="1" set="method" line="23"><f a=""><e path="Void"/></f></testDoubleAddListener>
		<testDoubleSend public="1" set="method" line="33"><f a=""><e path="Void"/></f></testDoubleSend>
		<incrementCompleteCount set="method" line="43"><f a="message">
	<unknown/>
	<e path="Void"/>
</f></incrementCompleteCount>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestMessenger.Message" params="" file="construct/src_test/bpmjs/TestMessenger.hx" private="1" module="bpmjs.TestMessenger"><new public="1" set="method" line="51"><f a=""><e path="Void"/></f></new></class>
	<class path="bpmjs.Context" params="" file="construct/src_bpmjs/bpmjs/Context.hx">
		<contextConfig public="1"><c path="bpmjs.ContextConfig"/></contextConfig>
		<objects public="1"><c path="Array"><c path="bpmjs.ContextObject"/></c></objects>
		<observers public="1"><c path="Array"><c path="bpmjs.Observer"/></c></observers>
		<addObject public="1" set="method" line="18"><f a="name:classInfo:object">
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<unknown/>
	<c path="bpmjs.ContextObject"/>
</f></addObject>
		<getObjectByName public="1" set="method" line="25"><f a="name">
	<c path="String"/>
	<d/>
</f></getObjectByName>
		<getObjectByType public="1" params="T" set="method" line="35"><f a="type">
	<c path="Class"><c path="getObjectByType.T"/></c>
	<d/>
</f></getObjectByType>
		<getDynamicObjectsByType public="1" params="T" set="method" line="47"><f a="type">
	<c path="Class"><c path="getDynamicObjectsByType.T"/></c>
	<c path="List"><c path="bpmjs.ContextObject"/></c>
</f></getDynamicObjectsByType>
		<addObserver public="1" set="method" line="52"><f a="object:methodName:type">
	<c path="bpmjs.ContextObject"/>
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<e path="Void"/>
</f></addObserver>
		<getFilterByType params="T" set="method" line="63"><f a="type">
	<c path="Class"><c path="getFilterByType.T"/></c>
	<f a="contextObject">
		<c path="bpmjs.ContextObject"/>
		<e path="Bool"/>
	</f>
</f></getFilterByType>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.ContextObject" params="" file="construct/src_bpmjs/bpmjs/Context.hx" module="bpmjs.Context">
		<name public="1"><c path="String"/></name>
		<type public="1"><c path="Class"><d/></c></type>
		<object public="1"><d/></object>
		<classInfo public="1"><c path="reflect.ClassInfo"/></classInfo>
		<new public="1" set="method" line="79"><f a="name:classInfo:object">
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<unknown/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="bpmjs.Observer" params="" file="construct/src_bpmjs/bpmjs/Context.hx" module="bpmjs.Context">
		<object public="1"><c path="bpmjs.ContextObject"/></object>
		<methodName public="1"><c path="String"/></methodName>
		<type public="1"><c path="reflect.ClassInfo"/></type>
		<observe public="1" set="method" line="98"><f a="objectToObserve">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></observe>
		<new public="1" set="method" line="94"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.Sequencer" params="" file="construct/src_bpmjs/bpmjs/Sequencer.hx">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="7" static="1"><d/></__meta__>
		<__rtti public="1" line="7" static="1"><c path="String"/></__rtti>
		<context public="1"><c path="bpmjs.Context"/></context>
		<start public="1" set="method" line="14"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></start>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.Task" params="T" file="construct/src_bpmjs/bpmjs/Task.hx">
		<startSignaler public="1"><c path="hsl.haxe.Signaler"><c path="bpmjs.Task.T"/></c></startSignaler>
		<completeSignaler public="1"><c path="hsl.haxe.Signaler"><c path="bpmjs.Task.T"/></c></completeSignaler>
		<errorSignaler public="1"><c path="hsl.haxe.Signaler"><c path="bpmjs.TaskError"><c path="bpmjs.Task.T"/></c></c></errorSignaler>
		<monitor public="1" get="getMonitor" set="setMonitor"><c path="bpmjs.ProgressMonitor"/></monitor>
		<start public="1" set="method" line="24"><f a=""><e path="Void"/></f></start>
		<doStart public="1" set="method" line="38"><f a=""><e path="Void"/></f></doStart>
		<complete public="1" set="method" line="42"><f a=""><e path="Void"/></f></complete>
		<error public="1" set="method" line="49"><f a="result:error">
	<c path="bpmjs.Task.T"/>
	<c path="String"/>
	<e path="Void"/>
</f></error>
		<getMonitor set="method" line="57"><f a=""><c path="bpmjs.ProgressMonitor"/></f></getMonitor>
		<setMonitor set="method" line="62"><f a="monitor">
	<c path="bpmjs.ProgressMonitor"/>
	<c path="bpmjs.ProgressMonitor"/>
</f></setMonitor>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.TaskGroup" params="" file="construct/src_bpmjs/bpmjs/TaskGroup.hx">
		<extends path="bpmjs.Task"><c path="bpmjs.TaskGroup"/></extends>
		<tasks public="1"><c path="Array"><c path="bpmjs.Task"><d/></c></c></tasks>
		<autoStart public="1"><e path="Bool"/></autoStart>
		<parallelTasksMax public="1"><c path="Int"/></parallelTasksMax>
		<pendingTasks><c path="haxe.FastList"><c path="bpmjs.Task"><d/></c></c></pendingTasks>
		<add public="1" set="method" line="25"><f a="task">
	<c path="bpmjs.Task"><d/></c>
	<e path="Void"/>
</f></add>
		<doStart public="1" set="method" line="32" override="1"><f a=""><e path="Void"/></f></doStart>
		<recomputeMonitor public="1" set="method" line="42"><f a=""><e path="Void"/></f></recomputeMonitor>
		<getTotalTaskCount public="1" set="method" line="57"><f a=""><c path="Int"/></f></getTotalTaskCount>
		<nextTask set="method" line="62"><f a=""><e path="Void"/></f></nextTask>
		<handleTaskComplete set="method" line="85"><f a="task">
	<c path="bpmjs.Task"><d/></c>
	<e path="Void"/>
</f></handleTaskComplete>
		<handleTaskError set="method" line="92"><f a="taskError">
	<c path="bpmjs.TaskError"><d/></c>
	<e path="Void"/>
</f></handleTaskError>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.Sequence" params="" file="construct/src_bpmjs/bpmjs/Sequencer.hx" module="bpmjs.Sequencer">
		<extends path="bpmjs.TaskGroup"/>
		<name public="1"><c path="String"/></name>
		<objects public="1"><c path="Array"><c path="bpmjs.ContextObject"/></c></objects>
		<loadingTaskGroup><c path="bpmjs.LoadingTaskGroup"/></loadingTaskGroup>
		<timer><c path="haxe.Timer"/></timer>
		<addExecuteTask public="1" set="method" line="52"><f a="phase">
	<c path="String"/>
	<e path="Void"/>
</f></addExecuteTask>
		<addLoadingTask public="1" set="method" line="57"><f a=""><e path="Void"/></f></addLoadingTask>
		<start public="1" set="method" line="64" override="1"><f a=""><e path="Void"/></f></start>
		<execute public="1" set="method" line="70"><f a="phase">
	<c path="String"/>
	<e path="Void"/>
</f></execute>
		<handleProgress set="method" line="106"><f a=""><e path="Void"/></f></handleProgress>
		<handleComplete set="method" line="129"><f a="task">
	<c path="bpmjs.TaskGroup"/>
	<e path="Void"/>
</f></handleComplete>
		<handleError set="method" line="135"><f a="error">
	<c path="bpmjs.TaskError"><c path="bpmjs.TaskGroup"/></c>
	<e path="Void"/>
</f></handleError>
		<new public="1" set="method" line="42"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="bpmjs.ExecutePhaseTask" params="" file="construct/src_bpmjs/bpmjs/Sequencer.hx" module="bpmjs.Sequencer">
		<extends path="bpmjs.Task"><c path="bpmjs.ExecutePhaseTask"/></extends>
		<sequence><c path="bpmjs.Sequence"/></sequence>
		<phase><c path="String"/></phase>
		<doStart public="1" set="method" line="172" override="1"><f a=""><e path="Void"/></f></doStart>
		<new public="1" set="method" line="164"><f a="sequence:phase">
	<c path="bpmjs.Sequence"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="bpmjs.LoadingTaskGroup" params="" file="construct/src_bpmjs/bpmjs/Sequencer.hx" module="bpmjs.Sequencer">
		<extends path="bpmjs.TaskGroup"/>
		<new public="1" set="method" line="189"><f a="sequence">
	<c path="bpmjs.Sequence"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="List" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="bpmjs.ReflectUtil" params="" file="construct/src_bpmjs/bpmjs/ReflectUtil.hx">
		<callMethodWithMetadata public="1" set="method" line="8" static="1"><f a="object:type:metadata:args">
	<d/>
	<c path="Class"><d/></c>
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></callMethodWithMetadata>
		<getClassName public="1" set="method" line="24" static="1"><f a="object">
	<d/>
	<c path="String"/>
</f></getClassName>
	</class>
	<class path="bpmjs.integration.Tests" params="" file="construct/src_test/bpmjs/integration/Tests.hx"><addTo public="1" set="method" line="5" static="1"><f a="runner">
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></addTo></class>
	<class path="bpmjs.TestConfigure" params="" file="construct/src_test/bpmjs/TestConfigure.hx">
		<extends path="TestCase2"/>
		<testObject public="1" set="method" line="5"><f a=""><e path="Void"/></f></testObject>
		<testInject public="1" set="method" line="15"><f a=""><e path="Void"/></f></testInject>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestConfigure.TestConfigWithA" params="" file="construct/src_test/bpmjs/TestConfigure.hx" private="1" module="bpmjs.TestConfigure">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="26" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestConfigure.A"/></a>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestConfigure.A" params="" file="construct/src_test/bpmjs/TestConfigure.hx" private="1" module="bpmjs.TestConfigure">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="37" static="1"><d/></__meta__>
		<__rtti public="1" line="37" static="1"><c path="String"/></__rtti>
		<b public="1"><c path="bpmjs._TestConfigure.B"/></b>
		<new public="1" set="method" line="42"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestConfigure.B" params="" file="construct/src_test/bpmjs/TestConfigure.hx" private="1" module="bpmjs.TestConfigure">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="47" static="1"><d/></__meta__>
		<__rtti public="1" line="47" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestConfigure.A"/></a>
		<new public="1" set="method" line="53"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmgl.Matrix4TestCase" params="" file="construct/src_test/bpmgl/Matrix4TestCase.hx">
		<extends path="TestCase2"/>
		<matrixEquals public="1" set="method" line="5"><f a="?expected:?description:m">
	<c path="Matrix4"/>
	<c path="String"/>
	<c path="Matrix4"/>
	<e path="Void"/>
</f></matrixEquals>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmgl.TestMatrix4Creations" params="" file="construct/src_test/bpmgl/TestMatrix4Creations.hx">
		<extends path="bpmgl.Matrix4TestCase"/>
		<m public="1"><c path="Matrix4"/></m>
		<setup public="1" set="method" line="7" override="1"><f a=""><e path="Void"/></f></setup>
		<testSetTranslation public="1" set="method" line="12"><f a=""><e path="Void"/></f></testSetTranslation>
		<testSetScale public="1" set="method" line="18"><f a=""><e path="Void"/></f></testSetScale>
		<testSetRotationX public="1" set="method" line="24"><f a=""><e path="Void"/></f></testSetRotationX>
		<testSetRotationY public="1" set="method" line="30"><f a=""><e path="Void"/></f></testSetRotationY>
		<testSetRotationZ public="1" set="method" line="36"><f a=""><e path="Void"/></f></testSetRotationZ>
		<testSetRotation public="1" set="method" line="42"><f a=""><e path="Void"/></f></testSetRotation>
		<testSetFrom public="1" set="method" line="48"><f a=""><e path="Void"/></f></testSetFrom>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="reflect.Field" params="" file="construct/src_reflect/reflect/Field.hx">
		<implements path="reflect.MetadataAware"/>
		<owner public="1" get="getOwner" set="null"><c path="reflect.ClassInfo"/></owner>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<type public="1" get="getType" set="null"><c path="reflect.ClassInfo"/></type>
		<clazz public="1" get="getClass" set="null"><c path="Class"><d/></c></clazz>
		<field><t path="haxe.rtti.ClassField"/></field>
		<definedInClass><c path="String"/></definedInClass>
		<hasMetadata public="1" set="method" line="23"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></hasMetadata>
		<getOwner get="inline" set="null" line="41"><f a=""><c path="reflect.ClassInfo"/></f></getOwner>
		<getName get="inline" set="null" line="46"><f a=""><c path="String"/></f></getName>
		<getType get="inline" set="null" line="51"><f a=""><c path="reflect.ClassInfo"/></f></getType>
		<getClass set="method" line="56"><f a=""><c path="Class"><d/></c></f></getClass>
		<new public="1" set="method" line="16"><f a="field:definedInClass:owner">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/unit/TestStatus.hx">
		<done public="1"><e path="Bool"/></done>
		<success public="1"><e path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="38" static="1"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<customTrace set="method" line="79" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></customTrace>
		<result><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="88"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></add>
		<run public="1" set="method" line="92"><f a=""><e path="Bool"/></f></run>
		<runCase set="method" line="101"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></runCase>
		<new public="1" set="method" line="83"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="38"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></sort>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="Null"><t path="haxe.rtti.ClassField"/></t></c>
</f></sortFields>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<mergeRights set="method" line="90"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeRights>
		<mergeFields set="method" line="99"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeFields>
		<mergeClasses set="method" line="103"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="139"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="159"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<merge set="method" line="167"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mkPath set="method" line="242"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="246"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="253"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="263"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="267"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="273"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xpath set="method" line="283"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="294"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="330"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xenum set="method" line="352"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="372"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xtypedef set="method" line="400"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="423"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="474"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="481"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="kumite.scene.SceneLifecycle" params="" file="construct/src/kumite/scene/SceneLifecycle.hx" interface="1">
		<sceneInit public="1" set="method"><f a="scene">
	<c path="kumite.scene.Scene"/>
	<e path="Void"/>
</f></sceneInit>
		<initTransition public="1" set="method"><f a="transitionContext">
	<c path="kumite.scene.TransitionContext"/>
	<e path="Void"/>
</f></initTransition>
		<renderTransition public="1" set="method"><f a="transitionContext">
	<c path="kumite.scene.TransitionContext"/>
	<e path="Void"/>
</f></renderTransition>
		<render public="1" set="method"><f a=""><e path="Void"/></f></render>
	</class>
	<class path="bpmjs.ContextConfig" params="" file="construct/src_bpmjs/bpmjs/ContextConfig.hx">
		<frontMessenger public="1"><c path="bpmjs.FrontMessenger"/></frontMessenger>
		<new public="1" set="method" line="9"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="hsl.haxe.Signaler" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/Signaler.hx" interface="1">
		<isListenedTo public="1" get="getIsListenedTo" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[
	 * Indicates whether the signaler is listened to by at least one listener.
	 * 
	 * This property can be used for speed optimizations. If a signaler is not listened to, its subject does not have to
	 * calculate a value if that value will only be sent in a signal.
	 * 
	 * In this example the "Ball" class only calculates the distance if a listener is added to the signaler:
	 * <pre>
	 * package;
	 * import hsl.haxe.direct.DirectSignaler;
	 * import hsl.haxe.Signaler;
	 * class Ball {
	 * 	public var distanceUpdatedSignaler(default, null):DirectSignaler&lt;Float&gt;;
	 * 	public function new():Void {
	 * 		distanceUpdatedSignaler = new DirectSignaler(this);
	 * 	}
	 * 	public function move(x:Float, y:Float):Void {
	 * 		if (distanceUpdatedSignaler.isListenedTo) {
	 * 			var distance:Float = Math.sqrt(x * x + y * y);
	 * 			distanceUpdatedSignaler.dispatch(distance);
	 * 		}
	 * 	}
	 * }
	 * </pre>
	 ]]></haxe_doc>
		</isListenedTo>
		<subject public="1" set="null">
			<t path="hsl.haxe.Subject"/>
			<haxe_doc>
	 * The subject this signaler belongs to.
	 </haxe_doc>
		</subject>
		<addBubblingTarget public="1" set="method">
			<f a="value">
				<c path="hsl.haxe.Signaler"><c path="hsl.haxe.Signaler.Datatype"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
	 * Adds a bubbling target to the signaler. The signaler will bubble to this bubbling target in bubbling processes.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, or as3-signals by Robert Penner: those systems do not have an
	 * equivalent to this method, as they don't allow you to manually define where events/signals bubble to.
	 * </li></ul>
	 ]]></haxe_doc>
		</addBubblingTarget>
		<addNotificationTarget public="1" set="method">
			<f a="value">
				<c path="hsl.haxe.Signaler"><e path="Void"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
	 * Adds a notification target to the signaler. The signaler will notify to this notification target in bubbling processes,
	 * however, the data inside the signal will not be passed to this notification target.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, or as3-signals by Robert Penner: those systems do not have an
	 * equivalent to this method, as they don't allow you to manually define where events/signals bubble to.
	 * </li></ul>
	 ]]></haxe_doc>
		</addNotificationTarget>
		<bind public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="hsl.haxe.Signaler.Datatype"/>
					<d/>
				</f>
				<c path="hsl.haxe.Bond"/>
			</f>
			<haxe_doc><![CDATA[
	 * Binds this signaler to a listener function that accepts an argument of the datatype of this signaler, and returns nothing.
	 * Returns the bond between the signaler. The bond can be removed by calling either the unbind method of the signaler, or the
	 * destroy method of the returned bond.
	 * 
	 * <ul><li>
	 * If you are familiar with jQuery: this method is similar to the "bind" method of that library.
	 * </li><li>
	 * If you are familiar with as3-signals by Robert Penner: this method is similar to the "add" method of that library.
	 * </li><li>
	 * If you are familiar with events in ActionScript 3.0: this method is similar to the "addEventListener" method of that
	 * system, though the bindAdvanced method of this library has more similarities to addEventListener.
	 * </li></ul>
	 ]]></haxe_doc>
		</bind>
		<bindAdvanced public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="hsl.haxe.Signal"><c path="hsl.haxe.Signaler.Datatype"/></c>
					<d/>
				</f>
				<c path="hsl.haxe.Bond"/>
			</f>
			<haxe_doc><![CDATA[
	 * Binds this signaler to a listener function that accepts a signal, and returns nothing. Returns the bond between the
	 * signaler. The bond can be removed by calling either the unbindAdvanced method of the signaler, or the destroy method of
	 * the returned bond.
	 * 
	 * <ul><li>
	 * If you are familiar with jQuery: this method is similar to the "bind" method of that library.
	 * </li><li>
	 * If you are familiar with as3-signals by Robert Penner: this method is similar to the "add" method of that library, though
	 * the bind method of this library has more similarities to add.
	 * </li><li>
	 * If you are familiar with events in ActionScript 3.0: this method is similar to the "addEventListener" method of that
	 * system.
	 * </li></ul>
	 ]]></haxe_doc>
		</bindAdvanced>
		<bindVoid public="1" set="method">
			<f a="listener">
				<f a=""><d/></f>
				<c path="hsl.haxe.Bond"/>
			</f>
			<haxe_doc><![CDATA[
	 * Binds this signaler to a listener function that accepts nothing, and returns nothing. Returns the bond between the
	 * signaler. The bond can be removed by calling either the unbindVoid method of the signaler, or the destroy method of the
	 * returned bond.
	 * 
	 * <ul><li>
	 * If you are familiar with jQuery: this method is similar to the "bind" method of that library.
	 * </li><li>
	 * If you are familiar with as3-signals by Robert Penner: this method is similar to the "add" method of that library, though
	 * the bind method of this library has more similarities to add.
	 * </li><li>
	 * If you are familiar with events in ActionScript 3.0: this method is similar to the "addEventListener" method of that
	 * system, though the bindAdvanced method of this library has more similarities to addEventListener.
	 * </li></ul>
	 ]]></haxe_doc>
		</bindVoid>
		<dispatch public="1" set="method">
			<f a="?data:?origin:?positionInformation">
				<c path="hsl.haxe.Signaler.Datatype"/>
				<t path="hsl.haxe.Subject"/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Dispatches a signal, containing the passed data. All the listeners that are listening to this signaler will be notified.
	 * The signal will bubble to all of the bubbling targets that were added to this signaler. This method may only be called
	 * by the subject of the signaler.
	 </haxe_doc>
		</dispatch>
		<getIsListenedTo set="method"><f a=""><e path="Bool"/></f></getIsListenedTo>
		<removeBubblingTarget public="1" set="method">
			<f a="value">
				<c path="hsl.haxe.Signaler"><c path="hsl.haxe.Signaler.Datatype"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removes a bubbling target from the signaler. The signaler will stop bubbling to this bubbling target. If the signaler
	 * does not have the passed value as a bubbling target, calling this method has no effect.
	 </haxe_doc>
		</removeBubblingTarget>
		<removeNotificationTarget public="1" set="method">
			<f a="value">
				<c path="hsl.haxe.Signaler"><e path="Void"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removes a notification target from the signaler. The signaler will stop notifying this notification target. If the
	 * signaler does not have the passed value as a notification target, calling this method has no effect.
	 </haxe_doc>
		</removeNotificationTarget>
		<unbind public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="hsl.haxe.Signaler.Datatype"/>
					<d/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removed the bond between this signaler and a listener. If such bond does not exist, calling this method has no effect.
	 </haxe_doc>
		</unbind>
		<unbindAdvanced public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="hsl.haxe.Signal"><c path="hsl.haxe.Signaler.Datatype"/></c>
					<d/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removed the bond between this signaler and a listener. If such bond does not exist, calling this method has no effect.
	 </haxe_doc>
		</unbindAdvanced>
		<unbindVoid public="1" set="method">
			<f a="listener">
				<f a=""><d/></f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removed the bond between this signaler and a listener. If such bond does not exist, calling this method has no effect.
	 </haxe_doc>
		</unbindVoid>
		<haxe_doc><![CDATA[
 * A signalers is a tool, used by a subject to notify its environment (listeners). Subjects create their signalers, usually in
 * their constructors. Listeners add themselves to signalers by calling one of the binding methods.
 * 
 * <ul><li>
 * If you are familiar with as3-signals by Robert Penner: signalers are similar to "signals" in that library.
 * </li><li>
 * If you are familiar with events in ActionScript 3.0: signalers have some similarities to "event dispatchers" in that system.
 * There is one major difference, though: an event dispatcher can dispatch events of different event types; but in this library
 * each type of signal has its own signaler.
 * </li></ul>
 ]]></haxe_doc>
	</class>
	<class path="bpmjs.TestDynamic" params="" file="construct/src_test/bpmjs/TestDynamic.hx">
		<extends path="TestCase2"/>
		<bCount public="1" line="5" static="1"><c path="Int"/></bCount>
		<testObjects public="1" set="method" line="7"><f a=""><e path="Void"/></f></testObjects>
		<testListInject public="1" set="method" line="13"><f a=""><e path="Void"/></f></testListInject>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestDynamic.TestConfigWithAAndDyanmicBs" params="" file="construct/src_test/bpmjs/TestDynamic.hx" private="1" module="bpmjs.TestDynamic">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="22" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestDynamic.A"/></a>
		<bList public="1"><c path="Array"><c path="bpmjs._TestDynamic.B"/></c></bList>
		<new public="1" set="method" line="28"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestDynamic.A" params="" file="construct/src_test/bpmjs/TestDynamic.hx" private="1" module="bpmjs.TestDynamic">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="40" static="1"><d/></__meta__>
		<__rtti public="1" line="40" static="1"><c path="String"/></__rtti>
		<bList public="1"><c path="Array"><c path="bpmjs._TestDynamic.B"/></c></bList>
		<new public="1" set="method" line="45"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestDynamic.B" params="" file="construct/src_test/bpmjs/TestDynamic.hx" private="1" module="bpmjs.TestDynamic">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="50" static="1"><d/></__meta__>
		<__rtti public="1" line="50" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestDynamic.A"/></a>
		<handleComplete public="1" set="method" line="61"><f a=""><e path="Void"/></f></handleComplete>
		<new public="1" set="method" line="56"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.TestGetObject" params="" file="construct/src_test/bpmjs/TestGetObject.hx">
		<extends path="TestCase2"/>
		<testGetObjectByName public="1" set="method" line="6"><f a=""><e path="Void"/></f></testGetObjectByName>
		<testGetObjectByNameValidate public="1" set="method" line="13"><f a=""><e path="Void"/></f></testGetObjectByNameValidate>
		<testGetObjectByType public="1" set="method" line="21"><f a=""><e path="Void"/></f></testGetObjectByType>
		<testGetObjectAAndBByName public="1" set="method" line="28"><f a=""><e path="Void"/></f></testGetObjectAAndBByName>
		<testGetObjectAAndBByType public="1" set="method" line="39"><f a=""><e path="Void"/></f></testGetObjectAAndBByType>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestGetObject.TestConfigWithA" params="" file="construct/src_test/bpmjs/TestGetObject.hx" private="1" module="bpmjs.TestGetObject">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="51" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestGetObject.A"/></a>
		<new public="1" set="method" line="55"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestGetObject.A" params="" file="construct/src_test/bpmjs/TestGetObject.hx" private="1" module="bpmjs.TestGetObject">
		<value><e path="Bool"/></value>
		<getValue public="1" set="method" line="71"><f a=""><e path="Bool"/></f></getValue>
		<new public="1" set="method" line="66"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestGetObject.TestConfigWithAAndB" params="" file="construct/src_test/bpmjs/TestGetObject.hx" private="1" module="bpmjs.TestGetObject">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="77" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestGetObject.A"/></a>
		<b public="1"><c path="bpmjs._TestGetObject.B"/></b>
		<new public="1" set="method" line="82"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestGetObject.B" params="" file="construct/src_test/bpmjs/TestGetObject.hx" private="1" module="bpmjs.TestGetObject"><new public="1" set="method" line="92"><f a=""><e path="Void"/></f></new></class>
	<typedef path="Vec3Components" params="" file="construct/src_bpmgl/Vec3.hx" module="Vec3"><a>
	<z><c path="Float"/></z>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<class path="Vec3" params="" file="construct/src_bpmgl/Vec3.hx">
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<scale public="1" set="method" line="16"><f a="factor">
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<multiply public="1" set="method" line="23"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></multiply>
		<subtract public="1" set="method" line="30"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Vec3"/>
</f></subtract>
		<normalize public="1" set="method" line="39"><f a=""><c path="Vec3"/></f></normalize>
		<getLength public="1" set="method" line="49"><f a=""><c path="Float"/></f></getLength>
		<cross public="1" set="method" line="54"><f a="vec">
	<c path="Vec3"/>
	<c path="Vec3"/>
</f></cross>
		<dot public="1" set="method" line="62"><f a="vec">
	<c path="Vec3"/>
	<c path="Float"/>
</f></dot>
		<equals public="1" set="method" line="67"><f a="vec">
	<c path="Vec3"/>
	<e path="Bool"/>
</f></equals>
		<transform public="1" set="method" line="72"><f a="matrix">
	<c path="Matrix4"/>
	<e path="Void"/>
</f></transform>
		<setFrom public="1" set="method" line="81"><f a="?value:?vec3">
	<c path="Float"/>
	<t path="Vec3Components"/>
	<e path="Void"/>
</f></setFrom>
		<clone public="1" set="method" line="97"><f a=""><c path="Vec3"/></f></clone>
		<toString public="1" set="method" line="102"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="9"><f a="?x:?y:?z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="LogFilter" params="" file="construct/src_bpmjs/LogFilter.hx" interface="1"><enabled public="1" set="method"><f a="input:i:level">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="LogLevel"/>
	<e path="Bool"/>
</f></enabled></class>
	<class path="Class" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="LogLevel" params="" file="construct/src_bpmjs/LogLevel.hx">
		<INFO public="1" line="3" static="1"><c path="LogLevel"/></INFO>
		<WARN public="1" line="4" static="1"><c path="LogLevel"/></WARN>
		<ERROR public="1" line="5" static="1"><c path="LogLevel"/></ERROR>
		<OFF public="1" line="6" static="1"><c path="LogLevel"/></OFF>
		<value><c path="Int"/></value>
		<isSmallerOrEqual public="1" set="method" line="15"><f a="level">
	<c path="LogLevel"/>
	<e path="Bool"/>
</f></isSmallerOrEqual>
		<new set="method" line="10"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Reflect" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="46" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="50" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="54" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="71" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="75" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="79" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="87" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="94" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="100" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="107" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="bpmjs.FrontMessenger" params="" file="construct/src_bpmjs/bpmjs/FrontMessenger.hx" interface="1">
		<addMessenger public="1" set="method"><f a="messenger">
	<c path="bpmjs.Messenger"/>
	<e path="Void"/>
</f></addMessenger>
		<addReceiver public="1" set="method"><f a="receivingObject:methodName:type">
	<d/>
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></addReceiver>
	</class>
	<class path="bpmjs.DefaultFrontMessenger" params="" file="construct/src_bpmjs/bpmjs/FrontMessenger.hx" module="bpmjs.FrontMessenger">
		<implements path="bpmjs.FrontMessenger"/>
		<receivers><c path="Array"><c path="bpmjs._FrontMessenger.Receiver"/></c></receivers>
		<addMessenger public="1" set="method" line="19"><f a="messenger">
	<c path="bpmjs.Messenger"/>
	<e path="Void"/>
</f></addMessenger>
		<addReceiver public="1" set="method" line="25"><f a="receivingObject:methodName:type">
	<d/>
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></addReceiver>
		<handleMessage set="method" line="31"><f a="message">
	<d/>
	<e path="Void"/>
</f></handleMessage>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._FrontMessenger.Receiver" params="" file="construct/src_bpmjs/bpmjs/FrontMessenger.hx" private="1" module="bpmjs.FrontMessenger">
		<receiver public="1"><d/></receiver>
		<method public="1"><d/></method>
		<methodName public="1"><c path="String"/></methodName>
		<type public="1"><c path="Class"><d/></c></type>
		<matches public="1" get="inline" set="null" line="59"><f a="message">
	<d/>
	<e path="Bool"/>
</f></matches>
		<execute public="1" get="inline" set="null" line="64"><f a="message">
	<d/>
	<e path="Void"/>
</f></execute>
		<new public="1" set="method" line="51"><f a="receiver:methodName:type">
	<d/>
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="kumite.scene.RenderContext" params="" file="construct/src/kumite/scene/RenderContext.hx">
		<width public="1" get="getWidth" set="null"><c path="Int"/></width>
		<height public="1" get="getHeight" set="null"><c path="Int"/></height>
		<aspect public="1" get="getAspect" set="null"><c path="Float"/></aspect>
		<viewports><c path="Array"><c path="kumite.scene._RenderContext.Viewport"/></c></viewports>
		<resetViewport public="1" set="method" line="16"><f a="width:height">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resetViewport>
		<pushViewport public="1" set="method" line="22"><f a="width:height">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></pushViewport>
		<popViewport public="1" set="method" line="34"><f a=""><e path="Void"/></f></popViewport>
		<getWidth set="method" line="39"><f a=""><c path="Int"/></f></getWidth>
		<getHeight set="method" line="44"><f a=""><c path="Int"/></f></getHeight>
		<getAspect set="method" line="49"><f a=""><c path="Float"/></f></getAspect>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="kumite.scene._RenderContext.Viewport" params="" file="construct/src/kumite/scene/RenderContext.hx" private="1" module="kumite.scene.RenderContext">
		<width public="1"><c path="Int"/></width>
		<height public="1"><c path="Int"/></height>
		<new public="1" set="method" line="59"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration.TestMultipleConfigs" params="" file="construct/src_test/bpmjs/integration/TestMultipleConfigs.hx">
		<extends path="TestCase2"/>
		<testGetObject public="1" set="method" line="5"><f a=""><e path="Void"/></f></testGetObject>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMultipleConfigs.TestConfigWithA" params="" file="construct/src_test/bpmjs/integration/TestMultipleConfigs.hx" private="1" module="bpmjs.integration.TestMultipleConfigs">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="15" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs.integration._TestMultipleConfigs.A"/></a>
		<new public="1" set="method" line="19"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMultipleConfigs.TestConfigWithB" params="" file="construct/src_test/bpmjs/integration/TestMultipleConfigs.hx" private="1" module="bpmjs.integration.TestMultipleConfigs">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="25" static="1"><c path="String"/></__rtti>
		<b public="1"><c path="bpmjs.integration._TestMultipleConfigs.B"/></b>
		<new public="1" set="method" line="29"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMultipleConfigs.A" params="" file="construct/src_test/bpmjs/integration/TestMultipleConfigs.hx" private="1" module="bpmjs.integration.TestMultipleConfigs">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="35" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="37"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMultipleConfigs.B" params="" file="construct/src_test/bpmjs/integration/TestMultipleConfigs.hx" private="1" module="bpmjs.integration.TestMultipleConfigs">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="42" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="44"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="ERegFilter" params="" file="construct/src_bpmjs/ERegFilter.hx">
		<implements path="LogFilter"/>
		<level><c path="LogLevel"/></level>
		<r><c path="EReg"/></r>
		<enabled public="1" set="method" line="12"><f a="input:i:level">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="LogLevel"/>
	<e path="Bool"/>
</f></enabled>
		<new public="1" set="method" line="6"><f a="level:r">
	<c path="LogLevel"/>
	<c path="EReg"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="haxe.StackItem" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/Stack.hx" module="haxe.Stack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><c path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<c path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>
	Elements return by [Stack] methods.
</haxe_doc>
	</enum>
	<class path="haxe.Stack" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/Stack.hx">
		<callStack public="1" set="method" line="46" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the call stack elements.
	</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="69" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		catched.
	</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="100" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of the stack as a printable string.
	</haxe_doc>
		</toString>
		<itemToString set="method" line="109" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<e path="Void"/>
</f></itemToString>
		<makeStack set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>
	Get informations about the call stack.
</haxe_doc>
	</class>
	<class path="haxe.FastCell" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/FastList.hx" module="haxe.FastList">
		<elt public="1"><c path="haxe.FastCell.T"/></elt>
		<next public="1"><c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.FastCell.T"/>
	<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.FastList" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/FastList.hx">
		<head public="1"><c path="haxe.FastCell"><c path="haxe.FastList.T"/></c></head>
		<add public="1" get="inline" set="null" line="60">
			<f a="item">
				<c path="haxe.FastList.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the head of the list.
	</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="68">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="77">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="90">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="98">
			<f a="v">
				<c path="haxe.FastList.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="123">
			<f a=""><t path="Iterator"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="141">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="54">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. A different class is created for each container used in platforms where it matters
</haxe_doc>
	</class>
	<class path="bpmjs.TestFrontMessenger" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx">
		<extends path="TestCase2"/>
		<receiveCount public="1" static="1"><c path="Int"/></receiveCount>
		<setup public="1" set="method" line="9" override="1"><f a=""><e path="Void"/></f></setup>
		<testWithMessage2 public="1" set="method" line="14"><f a=""><e path="Void"/></f></testWithMessage2>
		<testNoSendWithMessage2 public="1" set="method" line="28"><f a=""><e path="Void"/></f></testNoSendWithMessage2>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.Messenger" params="" file="construct/src_bpmjs/bpmjs/Messenger.hx">
		<receivers><c path="Array"><c path="bpmjs._Messenger.ReceiverForType"/></c></receivers>
		<addReceiver public="1" set="method" line="12"><f a="type:listener">
	<c path="Class"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></addReceiver>
		<removeReceiver public="1" set="method" line="18"><f a="type:listener">
	<c path="Class"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></removeReceiver>
		<send public="1" set="method" line="30"><f a="message">
	<d/>
	<e path="Void"/>
</f></send>
		<toString public="1" set="method" line="39"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestFrontMessenger.SendingObject" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx" private="1" module="bpmjs.TestFrontMessenger">
		<extends path="bpmjs.Messenger"/>
		<doSend public="1" set="method" line="50"><f a=""><e path="Void"/></f></doSend>
		<new public="1" set="method" line="45"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestFrontMessenger.CustomSendingObject" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx" private="1" module="bpmjs.TestFrontMessenger">
		<extends path="bpmjs.Messenger"/>
		<doSend public="1" set="method" line="63"><f a=""><e path="Void"/></f></doSend>
		<new public="1" set="method" line="58"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestFrontMessenger.CustomReceivingObject" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx" private="1" module="bpmjs.TestFrontMessenger">
		<handleComplete public="1" set="method" line="76"><f a="message">
	<c path="bpmjs._TestFrontMessenger.Message2"/>
	<e path="Void"/>
</f></handleComplete>
		<new public="1" set="method" line="71"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestFrontMessenger.Message1" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx" private="1" module="bpmjs.TestFrontMessenger"><new public="1" set="method" line="84"><f a=""><e path="Void"/></f></new></class>
	<class path="bpmjs._TestFrontMessenger.Message2" params="" file="construct/src_test/bpmjs/TestFrontMessenger.hx" private="1" module="bpmjs.TestFrontMessenger"><new public="1" set="method" line="89"><f a=""><e path="Void"/></f></new></class>
	<class path="IntIter" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="Math" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="bpmjs.TestInject" params="" file="construct/src_test/bpmjs/TestInject.hx">
		<extends path="TestCase2"/>
		<testInject public="1" set="method" line="5"><f a=""><e path="Void"/></f></testInject>
		<testInjectContext public="1" set="method" line="13"><f a=""><e path="Void"/></f></testInjectContext>
		<testCircularInject public="1" set="method" line="21"><f a=""><e path="Void"/></f></testCircularInject>
		<testSuperInject public="1" set="method" line="32"><f a=""><e path="Void"/></f></testSuperInject>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInject.TestConfig" params="" file="construct/src_test/bpmjs/TestInject.hx" private="1" module="bpmjs.TestInject">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="41" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestInject.A"/></a>
		<b public="1"><c path="bpmjs._TestInject.B"/></b>
		<c public="1"><c path="bpmjs._TestInject.C"/></c>
		<new public="1" set="method" line="47"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInject.A" params="" file="construct/src_test/bpmjs/TestInject.hx" private="1" module="bpmjs.TestInject">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="55" static="1"><d/></__meta__>
		<__rtti public="1" line="55" static="1"><c path="String"/></__rtti>
		<b public="1"><c path="bpmjs._TestInject.B"/></b>
		<context public="1"><c path="bpmjs.Context"/></context>
		<new public="1" set="method" line="63"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInject.B" params="" file="construct/src_test/bpmjs/TestInject.hx" private="1" module="bpmjs.TestInject">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="68" static="1"><d/></__meta__>
		<__rtti public="1" line="68" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestInject.A"/></a>
		<new public="1" set="method" line="74"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInject.C" params="" file="construct/src_test/bpmjs/TestInject.hx" private="1" module="bpmjs.TestInject">
		<extends path="bpmjs._TestInject.B"/>
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="79" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="79"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getInnerHTML set="method" line="152"><f a=""><c path="String"/></f></getInnerHTML>
		<getElements set="method" line="159"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="bpmjs.TaskError" params="T" file="construct/src_bpmjs/bpmjs/TaskError.hx">
		<task public="1"><c path="bpmjs.TaskError.T"/></task>
		<error public="1"><c path="String"/></error>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Angle" params="" file="construct/src_bpmgl/Angle.hx">
		<degToRad public="1" set="method" line="3" static="1"><f a="deg">
	<c path="Int"/>
	<c path="Float"/>
</f></degToRad>
		<radToDeg public="1" set="method" line="8" static="1"><f a="rad">
	<c path="Int"/>
	<c path="Float"/>
</f></radToDeg>
	</class>
	<enum path="ValueType" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="54" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="59" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="109" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="117" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="121" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="133" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="139" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="145" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="154" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="159" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="189" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="207" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="211" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="215" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="hsl.haxe.Signal" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/Signal.hx">
		<currentBond public="1" set="null">
			<c path="hsl.haxe.Bond"/>
			<haxe_doc>
	 * The bond that is currently processing the signal.
	 </haxe_doc>
		</currentBond>
		<currentTarget public="1" set="null">
			<t path="hsl.haxe.Subject"/>
			<haxe_doc><![CDATA[
	 * The subject that is currently dispatching this signal. This subject might be the origin for this signal, but could also be
	 * dispatching this signal in a bubbling process. For instance, if a user clicks on a button that is inside a menu, and
	 * signals bubble from that button to that menu, the currentTarget will be the button at some point and the menu at another.
	 * The origin will constantly be the button. In other words, the currentTarget is the subject the listener added itself to.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, jQuery, or any other system that was based on DOM level 3 events:
	 * this property is similar to the currentTarget property of the event objects in those systems.
	 * </li></ul>
	 * 
	 * In this example, the currentTarget property is used to determine which button was clicked. Note that this example is
	 * AVM2-specific, and requires the complete version of HSL (not just HSL-pico).
	 * <pre>
	 * package;
	 * import flash.display.Sprite;
	 * import flash.events.MouseEvent;
	 * import flash.Lib;
	 * import hsl.avm2.translating.AVM2Signaler;
	 * import hsl.haxe.direct.DirectSignaler;
	 * import hsl.haxe.Signal;
	 * import hsl.haxe.Signaler;
	 * class Main {
	 * 	public static function addButton(x:Float, color:Int):Void {
	 * 		var button:Button = new Button(color);
	 * 		button.x = x;
	 * 		button.clickedSignaler.bindAdvanced(handleButtonClicked);
	 * 		Lib.current.addChild(button);
	 * 	}
	 * 	public static function handleButtonClicked(signal:Signal&lt;Void&gt):Void {
	 * 		var button:Button = cast(signal.currentTarget, Button);
	 * 		trace("A button was clicked with this color: #" + StringTools.hex(button.color));
	 * 		removeButton(button);
	 * 	}
	 * 	private static function removeButton(button:Button):Void {
	 * 		button.clickedSignaler.unbindAdvanced(handleButtonClicked);
	 * 		Lib.current.removeChild(button);
	 * 	}
	 * 	public static function main():Void {
	 * 		addButton(0, 0x61C8E1);
	 * 		addButton(150, 0x61C8E1);
	 * 		addButton(300, 0xF68A1E);
	 * 		addButton(450, 0x61C8E1);
	 * 	}
	 * }
	 * class Button extends Sprite {
	 * 	public var clickedSignaler(default, null):Signaler&lt;Void&gt;;
	 * 	public var color:Int;
	 * 	public function new(color:Int):Void {
	 * 		super();
	 * 		clickedSignaler = new AVM2Signaler(this, this, MouseEvent.CLICK);
	 * 		this.color = color;
	 * 		buttonMode = true;
	 * 		draw();
	 * 	}
	 * 	private inline function draw():Void {
	 * 		graphics.beginFill(color);
	 * 		graphics.drawRoundRect(0, 0, 125, 77, 16);
	 * 		graphics.endFill();
	 * 	}
	 * }
	 * </pre>
	 * Note that this example is somewhat complex, and might be hard to understand if you are not familiar with the basics of
	 * this library.
	 ]]></haxe_doc>
		</currentTarget>
		<data public="1" set="null">
			<c path="hsl.haxe.Signal.Datatype"/>
			<haxe_doc>
	 * The data element in this signal.
	 </haxe_doc>
		</data>
		<data1 public="1" get="getData" set="null">
			<c path="hsl.haxe.Signal.Datatype"/>
			<haxe_doc>
	 * Deprecated. Equal to the data property.
	 </haxe_doc>
		</data1>
		<immediatePropagationStopped public="1" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Indicates whether stopImmediatePropagation method was called on this signal (true) or not (false).
	 </haxe_doc>
		</immediatePropagationStopped>
		<origin public="1" set="null">
			<t path="hsl.haxe.Subject"/>
			<haxe_doc><![CDATA[
	 * The subject that initially dispatched this signal. For instance, if a user clicks on a button that is inside a menu, and
	 * signals bubble from that button to that menu, the currentTarget will be the button at some point and the menu at another.
	 * The origin will constantly be the button. In other words, the origin is the subject that called the dispatch method.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, jQuery, or any other system that was based on DOM level 3 events:
	 * this property is similar to the target property of the event objects in those systems.
	 * </li></ul>
	 ]]></haxe_doc>
		</origin>
		<propagationStopped public="1" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Indicates whether stopPropagation method was called on this signal (true) or not (false). stopPropagation calls on other
	 * signals, even in the same dispatch process, don't influence this property.
	 </haxe_doc>
		</propagationStopped>
		<getData get="inline" set="null" line="148"><f a=""><c path="hsl.haxe.Signal.Datatype"/></f></getData>
		<stopImmediatePropagation public="1" get="inline" set="null" line="213">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[
	 * Stops all propagation of the signal. The subject currently dispatching this signal (as found in the target property of
	 * this the signal) stops doing so right away. Any other listeners that are listening are not notified.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, jQuery, or any other system that was based on DOM level 3 events:
	 * this method is similar to the stopImmediatePropagation method of the event objects in those systems.
	 * </li></ul>
	 * 
	 * In this example, the stopImmediatePropagation method is used to mute the sound that was produces by the "Muter" class:
	 * <pre>
	 * package;
	 * import hsl.haxe.direct.DirectSignaler;
	 * import hsl.haxe.Bond;
	 * import hsl.haxe.Signal;
	 * import hsl.haxe.Signaler;
	 * class Main {
	 * 	public static function traceCheer():Void {
	 * 		trace("Yay!");
	 * 	}
	 * 	public static function main():Void {
	 * 		var speaker:Speaker = new Speaker();
	 * 		var muter:Muter = new Muter(speaker);
	 * 		speaker.soundProducedSignaler.bindVoid(traceCheer);
	 * 		// This has no effect: the muter stops the signal propagation.
	 * 		speaker.produceSound();
	 * 		muter.disable();
	 * 		// This traces the cheer: the muter is disabled.
	 * 		speaker.produceSound();
	 * 		muter.enable();
	 * 		// This has no effect: the muter is re-enabled.
	 * 		speaker.produceSound();
	 * 	}
	 * }
	 * class Speaker {
	 * 	public var soundProducedSignaler(default, null):Signaler&lt;Void&gt;;
	 * 	public function new():Void {
	 * 		soundProducedSignaler = new DirectSignaler(this);
	 * 	}
	 * 	public inline function produceSound():Void {
	 * 		soundProducedSignaler.dispatch();
	 * 	}
	 * }
	 * class Muter {
	 * 	private var muteBond:Bond;
	 * 	public function new(speaker:Speaker):Void {
	 * 		muteBond = speaker.soundProducedSignaler.bindAdvanced(mute);
	 * 	}
	 * 	public inline function disable():Void {
	 * 		muteBond.halt();
	 * 	}
	 * 	public inline function enable():Void {
	 * 		muteBond.resume();
	 * 	}
	 * 	private function mute(signal:Signal&lt;Void&gt;):Void {
	 * 		signal.stopImmediatePropagation();
	 * 	}
	 * }
	 * </pre>
	 * Note that this example is somewhat complex, and might be hard to understand if you are not familiar with the basics of
	 * this library.
	 ]]></haxe_doc>
		</stopImmediatePropagation>
		<stopPropagation public="1" get="inline" set="null" line="226">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[
	 * Stops the bubbling of the signal. The subject currently dispatching this signal (as found in the target property of this
	 * the signal) will not bubble it to its bubbling targets. Calling this method does not prevent other listeners of the same
	 * signaler from being called: see stopImmediatePropagation for that functionality.
	 * 
	 * <ul><li>
	 * If you are familiar with events in ActionScript 3.0, jQuery, or any other system that was based on DOM level 3 events:
	 * this method is similar to the stopPropagation method of the event objects in those systems.
	 * </li></ul>
	 ]]></haxe_doc>
		</stopPropagation>
		<new public="1" set="method" line="136">
			<f a="data:currentBond:currentTarget:origin">
				<c path="hsl.haxe.Signal.Datatype"/>
				<c path="hsl.haxe.Bond"/>
				<t path="hsl.haxe.Subject"/>
				<t path="hsl.haxe.Subject"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new signal. Signals are usually created by signalers, so this constructor will probably not be called outside of
	 * the library itself.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * A signal is dispatched by a subject, through a signaler. However, only listeners that were added using the bindAdvanced
 * method can access the actual Signal instances.
 </haxe_doc>
	</class>
	<enum path="XmlType" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Xml.hx" module="Xml"/>
	<class path="EReg" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/EReg.hx">
		<r><d/></r>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="43">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="53">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="62">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="67">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="73">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="77">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="30"><f a="r:opt">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="Xml" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<enode line="39" static="1"><c path="EReg"/></enode>
		<ecdata line="40" static="1"><c path="EReg"/></ecdata>
		<edoctype line="41" static="1"><c path="EReg"/></edoctype>
		<eend line="42" static="1"><c path="EReg"/></eend>
		<epcdata line="43" static="1"><c path="EReg"/></epcdata>
		<ecomment line="44" static="1"><c path="EReg"/></ecomment>
		<eprolog line="45" static="1"><c path="EReg"/></eprolog>
		<eattribute line="47" static="1"><c path="EReg"/></eattribute>
		<eclose line="48" static="1"><c path="EReg"/></eclose>
		<ecdata_end line="49" static="1"><c path="EReg"/></ecdata_end>
		<edoctype_elt line="50" static="1"><c path="EReg"/></edoctype_elt>
		<ecomment_end line="51" static="1"><c path="EReg"/></ecomment_end>
		<parse public="1" set="method" line="64" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="167" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="176" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="183" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="190" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="197" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="204" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" line="211" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<_nodeName><c path="String"/></_nodeName>
		<_nodeValue><c path="String"/></_nodeValue>
		<_attributes><c path="Hash"><c path="String"/></c></_attributes>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_parent><c path="Xml"/></_parent>
		<getNodeName set="method" line="218"><f a=""><c path="String"/></f></getNodeName>
		<setNodeName set="method" line="224"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<getNodeValue set="method" line="230"><f a=""><c path="String"/></f></getNodeValue>
		<setNodeValue set="method" line="236"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<getParent set="method" line="242"><f a=""><c path="Xml"/></f></getParent>
		<get public="1" set="method" line="246">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method" line="252">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<remove public="1" set="method" line="258">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<exists public="1" set="method" line="264">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="270">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="276">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="290">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="322">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="355">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="360">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="373">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="380">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="388">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="395">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<new set="method" line="164"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<class path="bpmjs.TestObserve" params="" file="construct/src_test/bpmjs/TestObserve.hx">
		<extends path="TestCase2"/>
		<testObserve public="1" set="method" line="5"><f a=""><e path="Void"/></f></testObserve>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestObserve.TestConfigWithAAndB" params="" file="construct/src_test/bpmjs/TestObserve.hx" private="1" module="bpmjs.TestObserve">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="14" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestObserve.A"/></a>
		<b public="1"><c path="bpmjs._TestObserve.B"/></b>
		<new public="1" set="method" line="19"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestObserve.A" params="" file="construct/src_test/bpmjs/TestObserve.hx" private="1" module="bpmjs.TestObserve">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="27" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="29"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestObserve.B" params="" file="construct/src_test/bpmjs/TestObserve.hx" private="1" module="bpmjs.TestObserve">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="34" static="1"><d/></__meta__>
		<__rtti public="1" line="34" static="1"><c path="String"/></__rtti>
		<observeCalledCount public="1"><c path="Int"/></observeCalledCount>
		<observe public="1" set="method" line="44"><f a="a">
	<c path="bpmjs._TestObserve.A"/>
	<e path="Void"/>
</f></observe>
		<new public="1" set="method" line="38"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="js.Boot" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="33" static="1"><f a="v:i">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__clear_trace set="method" line="50" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__closure set="method" line="62" static="1"><f a="o:f">
	<c path="Array"><a><apply set="null"><unknown/></apply></a></c>
	<c path="Int"/>
	<f a=""><unknown/></f>
</f></__closure>
		<__string_rec set="method" line="74" static="1"><f a="o:s">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<a><length set="null"><c path="Int"/></length></a>
	<c path="String"/>
</f></__string_rec>
		<__interfLoop set="method" line="146" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="161" static="1"><f a="o:cl">
	<d/>
	<t path="#Array"/>
	<e path="Bool"/>
</f></__instanceof>
		<__init set="method" line="194" static="1"><f a=""><e path="Void"/></f></__init>
	</class>
	<class path="haxe.Timer" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/Timer.hx">
		<delay public="1" set="method" line="77" static="1"><f a="f:time_ms">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<measure public="1" params="T" set="method" line="88" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<stamp public="1" set="method" line="98" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns a timestamp, in seconds
	</haxe_doc>
		</stamp>
		<id><t path="Null"><c path="Int"/></t></id>
		<timerId><c path="Int"/></timerId>
		<stop public="1" set="method" line="52"><f a=""><e path="Void"/></f></stop>
		<run public="1" set="dynamic" line="74"><f a=""><e path="Void"/></f></run>
		<new public="1" set="method" line="37"><f a="time_ms">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="kumite.scene.TransitionContext" params="" file="construct/src/kumite/scene/TransitionContext.hx">
		<extends path="kumite.scene.RenderContext"/>
		<transition public="1" get="getTransition" set="setTransition"><c path="Float"/></transition>
		<layerState public="1"><c path="kumite.scene.LayerState"/></layerState>
		<inScene public="1"><c path="kumite.scene.SceneAndLifecycle"/></inScene>
		<outScene public="1"><c path="kumite.scene.SceneAndLifecycle"/></outScene>
		<direction public="1"><e path="kumite.scene.TransitionDirection"/></direction>
		<toIn public="1" set="method" line="18"><f a=""><c path="kumite.scene.TransitionContext"/></f></toIn>
		<toOut public="1" set="method" line="24"><f a=""><c path="kumite.scene.TransitionContext"/></f></toOut>
		<getTransition set="method" line="30"><f a=""><c path="Float"/></f></getTransition>
		<setTransition set="method" line="41"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setTransition>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration.TestMessaging" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx">
		<extends path="TestCase2"/>
		<messageReceivedCount public="1" static="1"><c path="Int"/></messageReceivedCount>
		<setup public="1" set="method" line="11" override="1"><f a=""><e path="Void"/></f></setup>
		<testDefaultFrontController public="1" set="method" line="16"><f a=""><e path="Void"/></f></testDefaultFrontController>
		<testCustomFrontController public="1" set="method" line="25"><f a=""><e path="Void"/></f></testCustomFrontController>
		<testMessengerAdded public="1" set="method" line="37"><f a=""><e path="Void"/></f></testMessengerAdded>
		<testReceiverAdded public="1" set="method" line="50"><f a=""><e path="Void"/></f></testReceiverAdded>
		<testMessageReceived public="1" set="method" line="65"><f a=""><e path="Void"/></f></testMessageReceived>
		<testMessageReceivedWithMessenger public="1" set="method" line="71"><f a=""><e path="Void"/></f></testMessageReceivedWithMessenger>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.MockFrontMessenger" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<implements path="bpmjs.FrontMessenger"/>
		<addMessengerCount public="1"><c path="Int"/></addMessengerCount>
		<lastMessenger public="1"><c path="bpmjs.Messenger"/></lastMessenger>
		<addReceiverCount public="1"><c path="Int"/></addReceiverCount>
		<lastReceivingObject public="1"><d/></lastReceivingObject>
		<lastMethodName public="1"><c path="String"/></lastMethodName>
		<lastMessageClass public="1"><c path="Class"><d/></c></lastMessageClass>
		<addMessenger public="1" set="method" line="94"><f a="messenger">
	<c path="bpmjs.Messenger"/>
	<e path="Void"/>
</f></addMessenger>
		<addReceiver public="1" set="method" line="101"><f a="receivingObject:methodName:messageClass">
	<d/>
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></addReceiver>
		<new public="1" set="method" line="88"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.Config" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="111" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs.integration._TestMessaging.A"/></a>
		<b public="1"><c path="bpmjs.integration._TestMessaging.B"/></b>
		<new public="1" set="method" line="116"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.ConfigWithMessenger" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="123" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs.integration._TestMessaging.AWithMessenger"/></a>
		<b public="1"><c path="bpmjs.integration._TestMessaging.B"/></b>
		<new public="1" set="method" line="128"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.A" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<extends path="bpmjs.Messenger"/>
		<__meta__ public="1" line="136" static="1"><d/></__meta__>
		<handleComplete public="1" set="method" line="139"><f a=""><e path="Void"/></f></handleComplete>
		<new public="1" set="method" line="136"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.AWithMessenger" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="145" static="1"><d/></__meta__>
		<__rtti public="1" line="145" static="1"><c path="String"/></__rtti>
		<messenger public="1"><c path="bpmjs.Messenger"/></messenger>
		<handleComplete public="1" set="method" line="153"><f a=""><e path="Void"/></f></handleComplete>
		<new public="1" set="method" line="150"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration._TestMessaging.B" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" private="1" module="bpmjs.integration.TestMessaging">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="159" static="1"><d/></__meta__>
		<__rtti public="1" line="159" static="1"><c path="String"/></__rtti>
		<handleStart public="1" set="method" line="167"><f a="message">
	<c path="bpmjs.integration.Message"/>
	<e path="Void"/>
</f></handleStart>
		<new public="1" set="method" line="161"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.integration.Message" params="" file="construct/src_test/bpmjs/integration/TestMessaging.hx" module="bpmjs.integration.TestMessaging"><new public="1" set="method" line="175"><f a=""><e path="Void"/></f></new></class>
	<class path="Hash" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Hash.hx">
		<h><d/></h>
		<set public="1" set="method" line="40">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="48">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="58">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="65">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="80">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="reflect.ClassInfo" params="" file="construct/src_reflect/reflect/ClassInfo.hx">
		<cache line="7" static="1"><c path="Hash"><c path="reflect.ClassInfo"/></c></cache>
		<forInstance public="1" set="method" line="9" static="1"><f a="instance">
	<d/>
	<c path="reflect.ClassInfo"/>
</f></forInstance>
		<forClass public="1" set="method" line="21" static="1"><f a="type">
	<c path="Class"><d/></c>
	<c path="reflect.ClassInfo"/>
</f></forClass>
		<forName public="1" set="method" line="31" static="1"><f a="name">
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
</f></forName>
		<forCType public="1" set="method" line="47" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<c path="reflect.ClassInfo"/>
</f></forCType>
		<getClassInfo set="method" line="66" static="1"><f a="name:type">
	<c path="String"/>
	<d/>
	<c path="reflect.ClassInfo"/>
</f></getClassInfo>
		<getHash set="method" line="78" static="1"><f a="name:type">
	<c path="String"/>
	<c path="Class"><d/></c>
	<c path="String"/>
</f></getHash>
		<type public="1" set="null"><c path="Class"><d/></c></type>
		<name public="1" set="null"><c path="String"/></name>
		<shortName public="1" get="getShortName" set="null"><c path="String"/></shortName>
		<hasRtti public="1" set="null"><e path="Bool"/></hasRtti>
		<properties public="1" get="getProperties" set="null"><c path="Array"><c path="reflect.Property"/></c></properties>
		<methods public="1" get="getMethods" set="null"><c path="Array"><c path="reflect.Method"/></c></methods>
		<getProperty public="1" set="method" line="101"><f a="name">
	<c path="String"/>
	<c path="reflect.Property"/>
</f></getProperty>
		<getMethod public="1" set="method" line="110"><f a="name">
	<c path="String"/>
	<c path="reflect.Method"/>
</f></getMethod>
		<toString public="1" set="method" line="119"><f a=""><c path="String"/></f></toString>
		<getShortName set="method" line="124"><f a=""><c path="String"/></f></getShortName>
		<getProperties set="method" line="129"><f a=""><c path="Array"><c path="reflect.Property"/></c></f></getProperties>
		<getMethods set="method" line="139"><f a=""><c path="Array"><c path="reflect.Method"/></c></f></getMethods>
		<initFields set="method" line="149"><f a=""><e path="Void"/></f></initFields>
		<scanClass set="method" line="156"><f a="type">
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></scanClass>
		<scanFields set="method" line="177"><f a="classDef">
	<t path="haxe.rtti.Classdef"/>
	<e path="Void"/>
</f></scanFields>
		<new set="method" line="94"><f a="name:type">
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="kumite.scene.TransitionDirection" params="" file="construct/src/kumite/scene/TransitionDirection.hx">
		<OUT/>
		<IN/>
	</enum>
	<class path="kumite.scene.TestLayerOrder" params="" file="construct/src_test/kumite/scene/TestLayerOrder.hx">
		<extends path="TestCase2"/>
		<testNoChange public="1" set="method" line="5"><f a=""><e path="Void"/></f></testNoChange>
		<testSingleChange public="1" set="method" line="10"><f a=""><e path="Void"/></f></testSingleChange>
		<testMultiChange public="1" set="method" line="15"><f a=""><e path="Void"/></f></testMultiChange>
		<testInsert public="1" set="method" line="20"><f a=""><e path="Void"/></f></testInsert>
		<testSwap public="1" set="method" line="25"><f a=""><e path="Void"/></f></testSwap>
		<testForceNewOrder public="1" set="method" line="30"><f a=""><e path="Void"/></f></testForceNewOrder>
		<testComplex1 public="1" set="method" line="35"><f a=""><e path="Void"/></f></testComplex1>
		<testComplex2 public="1" set="method" line="40"><f a=""><e path="Void"/></f></testComplex2>
		<testComplex3 public="1" set="method" line="45"><f a=""><e path="Void"/></f></testComplex3>
		<testComplex4 public="1" set="method" line="50"><f a=""><e path="Void"/></f></testComplex4>
		<assertOrder public="1" set="method" line="55"><f a="fromIds:toIds:expectedIds">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></assertOrder>
		<createScene public="1" set="method" line="67"><f a="ids">
	<c path="String"/>
	<c path="kumite.scene.Scene"/>
</f></createScene>
		<createIds public="1" set="method" line="83"><f a="scene">
	<c path="kumite.scene.Scene"/>
	<c path="String"/>
</f></createIds>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="hsl.haxe.DirectSignaler" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx">
		<implements path="hsl.haxe.Signaler"><c path="hsl.haxe.DirectSignaler.Datatype"/></implements>
		<bubblingTargets><c path="List"><c path="hsl.haxe.Signaler"><c path="hsl.haxe.DirectSignaler.Datatype"/></c></c></bubblingTargets>
		<isListenedTo public="1" get="getIsListenedTo" set="null"><e path="Bool"/></isListenedTo>
		<notificationTargets><c path="List"><c path="hsl.haxe.Signaler"><e path="Void"/></c></c></notificationTargets>
		<rejectNullData><e path="Bool"/></rejectNullData>
		<sentinel><c path="hsl.haxe._DirectSignaler.SentinelBond"><c path="hsl.haxe.DirectSignaler.Datatype"/></c></sentinel>
		<subject public="1" set="null"><t path="hsl.haxe.Subject"/></subject>
		<subjectClassNames>
			<c path="List"><c path="String"/></c>
			<haxe_doc>
	 * The fully qualified class names of the subject.
	 </haxe_doc>
		</subjectClassNames>
		<addBubblingTarget public="1" set="method" line="64"><f a="value">
	<c path="hsl.haxe.Signaler"><c path="hsl.haxe.DirectSignaler.Datatype"/></c>
	<e path="Void"/>
</f></addBubblingTarget>
		<addNotificationTarget public="1" set="method" line="70"><f a="value">
	<c path="hsl.haxe.Signaler"><e path="Void"/></c>
	<e path="Void"/>
</f></addNotificationTarget>
		<bind public="1" set="method" line="76"><f a="listener">
	<f a="">
		<c path="hsl.haxe.DirectSignaler.Datatype"/>
		<d/>
	</f>
	<c path="hsl.haxe.Bond"/>
</f></bind>
		<bindAdvanced public="1" set="method" line="86"><f a="listener">
	<f a="">
		<c path="hsl.haxe.Signal"><c path="hsl.haxe.DirectSignaler.Datatype"/></c>
		<d/>
	</f>
	<c path="hsl.haxe.Bond"/>
</f></bindAdvanced>
		<bindVoid public="1" set="method" line="96"><f a="listener">
	<f a=""><d/></f>
	<c path="hsl.haxe.Bond"/>
</f></bindVoid>
		<bubble get="inline" set="null" line="106"><f a="data:origin">
	<c path="hsl.haxe.DirectSignaler.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<e path="Void"/>
</f></bubble>
		<dispatch public="1" set="method" line="121"><f a="?data:?origin:?positionInformation">
	<c path="hsl.haxe.DirectSignaler.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></dispatch>
		<getIsListenedTo set="method" line="162"><f a=""><e path="Bool"/></f></getIsListenedTo>
		<getOrigin get="inline" set="null" line="168">
			<f a="origin">
				<t path="hsl.haxe.Subject"/>
				<t path="hsl.haxe.Subject"/>
			</f>
			<haxe_doc>
	 * Returns the passed origin if it is not null. Returns the subject of this signaler if the passed origin is null.
	 </haxe_doc>
		</getOrigin>
		<verifyCaller set="method" line="188">
			<f a="positionInformation">
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Checks whether the class name inside the passed position information equals the class name of the subject of this
	 * signaler. Used in the dispatch method, as that method may only be called by the subject.
	 * 
	 * Two notes.
	 * One, by using this method you check whether the caller is of the same type as the subject, which does not necessarily mean
	 * it's the same instance. This is the expected behavior, as it is consistent with private members.
	 * Two, one could hack his or her way around this check. How to do this should be obvious. The check is not designed to be
	 * unhackable; rather it is designed to prevent developers from accidentally misapplying HSL. Nicolas Cannasse once said
	 * "everything should be made accessible, if you know what you're doing".
	 </haxe_doc>
		</verifyCaller>
		<removeBubblingTarget public="1" set="method" line="200"><f a="value">
	<c path="hsl.haxe.Signaler"><c path="hsl.haxe.DirectSignaler.Datatype"/></c>
	<e path="Void"/>
</f></removeBubblingTarget>
		<removeNotificationTarget public="1" set="method" line="205"><f a="value">
	<c path="hsl.haxe.Signaler"><e path="Void"/></c>
	<e path="Void"/>
</f></removeNotificationTarget>
		<unbind public="1" set="method" line="215"><f a="listener">
	<f a="">
		<c path="hsl.haxe.DirectSignaler.Datatype"/>
		<d/>
	</f>
	<e path="Void"/>
</f></unbind>
		<unbindAdvanced public="1" set="method" line="218"><f a="listener">
	<f a="">
		<c path="hsl.haxe.Signal"><c path="hsl.haxe.DirectSignaler.Datatype"/></c>
		<d/>
	</f>
	<e path="Void"/>
</f></unbindAdvanced>
		<unbindVoid public="1" set="method" line="221"><f a="listener">
	<f a=""><d/></f>
	<e path="Void"/>
</f></unbindVoid>
		<new public="1" set="method" line="54">
			<f a="subject:?rejectNullData">
				<t path="hsl.haxe.Subject"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new direct signaler.
	 * 
	 * The passed subject will be used as the subject of this signaler. Only the subject is allowed to call the dispatch method.
	 * Signals dispatched by this signaler will have the subject as current target, and in some cases as origin.
	 * 
	 * If the reject null data flag is set, the signaler will throw an exception if the subject attempts to dispatch a signal
	 * with null as data, or the the signaler is about to bubble a signal that contains null as data.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * A signaler that dispatches signals directly.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.LinkedBond" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<extends path="hsl.haxe.Bond"/>
		<destroyed><e path="Bool"/></destroyed>
		<next><c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.LinkedBond.Datatype"/></c></next>
		<previous><c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.LinkedBond.Datatype"/></c></previous>
		<callListener public="1" set="method" line="244">
			<f a="data:currentTarget:origin:propagationStatus">
				<c path="hsl.haxe._DirectSignaler.LinkedBond.Datatype"/>
				<t path="hsl.haxe.Subject"/>
				<t path="hsl.haxe.Subject"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Calls the listener stored inside. Classes that extend this one should override this method.
	 </haxe_doc>
		</callListener>
		<determineEquals set="method" line="251">
			<f a="value">
				<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.LinkedBond.Datatype"/></c>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Determines whether the passed bond equals this one. Returns true if they are equal; false otherwise. Classes that extend
	 * this one should override this method.
	 </haxe_doc>
		</determineEquals>
		<destroy public="1" set="method" line="254" override="1"><f a=""><e path="Void"/></f></destroy>
		<unlink get="inline" set="null" line="261"><f a=""><e path="Void"/></f></unlink>
		<new public="1" set="method" line="234"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * A doubly linked bond. The bond has a reference to the next and the previous bond in the list.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.SentinelBond" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<extends path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.SentinelBond.Datatype"/></extends>
		<isConnected public="1" get="getIsConnected" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Indicates whether this sentinel is connected to other bonds (true), or not (false).
	 </haxe_doc>
		</isConnected>
		<add public="1" get="inline" set="null" line="291">
			<f a="value">
				<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.SentinelBond.Datatype"/></c>
				<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.SentinelBond.Datatype"/></c>
			</f>
			<haxe_doc>
	 * Inserts a bond between the sentinel and the previous bond. Effectively, the newely added bond ends up being the last one
	 * in the list.
	 </haxe_doc>
		</add>
		<callListener public="1" set="method" line="296" override="1"><f a="data:currentTarget:origin:propagationStatus">
	<c path="hsl.haxe._DirectSignaler.SentinelBond.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<t path="hsl.haxe.Subject"/>
	<c path="Int"/>
	<c path="Int"/>
</f></callListener>
		<getIsConnected get="inline" set="null" line="307">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * Determines whether this sentinel is connected to other bonds (true), or not (false).
	 </haxe_doc>
		</getIsConnected>
		<remove public="1" get="inline" set="null" line="317">
			<f a="value">
				<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.SentinelBond.Datatype"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Removes a bond connected to the sentinel.
	 * 
	 * The sentinel will look for the first bond equal to the passed value connected to it, and destroy it.
	 </haxe_doc>
		</remove>
		<new public="1" set="method" line="283">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Creates a new sentinel bond.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * A sentinel "bond". The sentinel is not a real bond, as it does not bind the signaler to a listener. Rather it is the value
 * before the first bond and after the last bond of this signaler. It contains logic that helps the signaler working with the
 * linked list structure.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.RegularBond" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<extends path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.RegularBond.Datatype"/></extends>
		<listener><f a="">
	<c path="hsl.haxe._DirectSignaler.RegularBond.Datatype"/>
	<e path="Void"/>
</f></listener>
		<callListener public="1" set="method" line="337" override="1"><f a="data:currentTarget:origin:propagationStatus">
	<c path="hsl.haxe._DirectSignaler.RegularBond.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<t path="hsl.haxe.Subject"/>
	<c path="Int"/>
	<c path="Int"/>
</f></callListener>
		<determineEquals set="method" line="346" override="1"><f a="value">
	<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.RegularBond.Datatype"/></c>
	<e path="Bool"/>
</f></determineEquals>
		<new public="1" set="method" line="333"><f a="listener">
	<f a="">
		<c path="hsl.haxe._DirectSignaler.RegularBond.Datatype"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * A regular bond is a bond that is created in result of a call to the bind method.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.NiladicBond" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<extends path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.NiladicBond.Datatype"/></extends>
		<listener><f a=""><e path="Void"/></f></listener>
		<callListener public="1" set="method" line="369" override="1"><f a="data:currentTarget:origin:propagationStatus">
	<c path="hsl.haxe._DirectSignaler.NiladicBond.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<t path="hsl.haxe.Subject"/>
	<c path="Int"/>
	<c path="Int"/>
</f></callListener>
		<determineEquals set="method" line="378" override="1"><f a="value">
	<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.NiladicBond.Datatype"/></c>
	<e path="Bool"/>
</f></determineEquals>
		<new public="1" set="method" line="365">
			<f a="listener">
				<f a=""><e path="Void"/></f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new niladic bond.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * A niladic bond is a bond that is created in result of a call to the bindVoid method.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.AdvancedBond" params="Datatype" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<extends path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.AdvancedBond.Datatype"/></extends>
		<listener><f a="">
	<c path="hsl.haxe.Signal"><c path="hsl.haxe._DirectSignaler.AdvancedBond.Datatype"/></c>
	<e path="Void"/>
</f></listener>
		<callListener public="1" set="method" line="401" override="1"><f a="data:currentTarget:origin:propagationStatus">
	<c path="hsl.haxe._DirectSignaler.AdvancedBond.Datatype"/>
	<t path="hsl.haxe.Subject"/>
	<t path="hsl.haxe.Subject"/>
	<c path="Int"/>
	<c path="Int"/>
</f></callListener>
		<determineEquals set="method" line="416" override="1"><f a="value">
	<c path="hsl.haxe._DirectSignaler.LinkedBond"><c path="hsl.haxe._DirectSignaler.AdvancedBond.Datatype"/></c>
	<e path="Bool"/>
</f></determineEquals>
		<new public="1" set="method" line="397">
			<f a="listener">
				<f a="">
					<c path="hsl.haxe.Signal"><c path="hsl.haxe._DirectSignaler.AdvancedBond.Datatype"/></c>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Creates a new advanced bond.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * An advanced bond is a bond that is created in result of a call to the bindAdvanced method.
 </haxe_doc>
	</class>
	<class path="hsl.haxe._DirectSignaler.PropagationStatus" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/DirectSignaler.hx" private="1" module="hsl.haxe.DirectSignaler">
		<IMMEDIATELY_STOPPED public="1" get="inline" set="null" line="428" static="1"><c path="Int"/></IMMEDIATELY_STOPPED>
		<STOPPED public="1" get="inline" set="null" line="429" static="1"><c path="Int"/></STOPPED>
		<UNDISTURBED public="1" get="inline" set="null" line="430" static="1"><c path="Int"/></UNDISTURBED>
	</class>
	<class path="bpmjs.SequencerTaskGroup" params="" file="construct/src_bpmjs/bpmjs/SequencerTaskGroup.hx">
		<extends path="bpmjs.TaskGroup"/>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.TestSequencer" params="" file="construct/src_test/bpmjs/TestSequencer.hx">
		<extends path="TestCase2"/>
		<initPrepareCount public="1" static="1"><c path="Int"/></initPrepareCount>
		<initCount public="1" static="1"><c path="Int"/></initCount>
		<setup public="1" set="method" line="8" override="1"><f a=""><e path="Void"/></f></setup>
		<testInitPrepare public="1" set="method" line="14"><f a=""><e path="Void"/></f></testInitPrepare>
		<testInit public="1" set="method" line="20"><f a=""><e path="Void"/></f></testInit>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestSequencer.TestConfig" params="" file="construct/src_test/bpmjs/TestSequencer.hx" private="1" module="bpmjs.TestSequencer">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="27" static="1"><c path="String"/></__rtti>
		<launcher public="1"><c path="bpmjs._TestSequencer.Launcher"/></launcher>
		<sequencer public="1"><c path="bpmjs.Sequencer"/></sequencer>
		<s1 public="1"><c path="bpmjs._TestSequencer.S1"/></s1>
		<new public="1" set="method" line="33"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestSequencer.Launcher" params="" file="construct/src_test/bpmjs/TestSequencer.hx" private="1" module="bpmjs.TestSequencer">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="41" static="1"><d/></__meta__>
		<__rtti public="1" line="41" static="1"><c path="String"/></__rtti>
		<sequencer public="1"><c path="bpmjs.Sequencer"/></sequencer>
		<handleContextPostComplete public="1" set="method" line="51"><f a=""><e path="Void"/></f></handleContextPostComplete>
		<new public="1" set="method" line="46"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestSequencer.S1" params="" file="construct/src_test/bpmjs/TestSequencer.hx" private="1" module="bpmjs.TestSequencer">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="58" static="1"><d/></__meta__>
		<__rtti public="1" line="58" static="1"><c path="String"/></__rtti>
		<initPrepare public="1" set="method" line="65"><f a=""><e path="Void"/></f></initPrepare>
		<init public="1" set="method" line="71"><f a=""><e path="Void"/></f></init>
		<new public="1" set="method" line="60"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmgl.TestMatrix4Operations" params="" file="construct/src_test/bpmgl/TestMatrix4Operations.hx">
		<extends path="bpmgl.Matrix4TestCase"/>
		<m public="1"><c path="Matrix4"/></m>
		<setup public="1" set="method" line="7" override="1"><f a=""><e path="Void"/></f></setup>
		<testIdentity public="1" set="method" line="18"><f a=""><e path="Void"/></f></testIdentity>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringBuf" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="59">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="75">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="89">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="bpmjs.TestProgressMonitor" params="" file="construct/src_test/bpmjs/TestProgressMonitor.hx">
		<extends path="TestCase2"/>
		<monitor public="1"><c path="bpmjs.ProgressMonitor"/></monitor>
		<setup public="1" set="method" line="7" override="1"><f a=""><e path="Void"/></f></setup>
		<testDefault public="1" set="method" line="12"><f a=""><e path="Void"/></f></testDefault>
		<testPercent public="1" set="method" line="17"><f a=""><e path="Void"/></f></testPercent>
		<testChild public="1" set="method" line="23"><f a=""><e path="Void"/></f></testChild>
		<test2ChildrenInit public="1" set="method" line="30"><f a=""><e path="Void"/></f></test2ChildrenInit>
		<test2ChildrenUpdate public="1" set="method" line="37"><f a=""><e path="Void"/></f></test2ChildrenUpdate>
		<test2SubChildrenUpdate public="1" set="method" line="45"><f a=""><e path="Void"/></f></test2SubChildrenUpdate>
		<test2ChildrenWeight public="1" set="method" line="55"><f a=""><e path="Void"/></f></test2ChildrenWeight>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Lambda" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>
		Creates an [Array] from an [Iterable]
	</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>
		Creates a [List] from an [Iterable]
	</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>
		Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.
	</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>
		Similar to [map], but also pass an index for each item iterated.
	</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.
	</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if at least one element of the iterable is found by using the specific function.
	</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if all elements of the iterable have the specified property defined by [f].
	</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Call the function 'f' on all elements of the [Iterable] 'it'.
	</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>
		Return the list of elements matching the function 'f'
	</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>
		Functional 'fold' using an [Iterable]
	</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Count the number of elements in an [Iterable] having [pred] returning true.
	</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an iterable does not contain any element.
	</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.
	</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>
		Returns a list containing all items of 'a' followed by all items of 'b'
	</haxe_doc>
		</concat>
		<haxe_doc>
	The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.
</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given type (class or enum)
	</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="43" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class fields or enum constructors
	</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<class path="bpmjs.ContextBuilder" params="" file="construct/src_bpmjs/bpmjs/ContextBuilder.hx">
		<defaultContext static="1"><c path="bpmjs.Context"/></defaultContext>
		<build public="1" set="method" line="13" static="1"><f a="configClass:?contextConfig">
	<c path="Class"><d/></c>
	<c path="bpmjs.ContextConfig"/>
	<c path="bpmjs.Context"/>
</f></build>
		<buildAll public="1" set="method" line="18" static="1"><f a="configClasses:?contextConfig">
	<c path="Array"><d/></c>
	<c path="bpmjs.ContextConfig"/>
	<c path="bpmjs.Context"/>
</f></buildAll>
		<configure public="1" set="method" line="29" static="1"><f a="object">
	<d/>
	<e path="Void"/>
</f></configure>
		<createDefaultContextConfig set="method" line="41" static="1"><f a=""><c path="bpmjs.ContextConfig"/></f></createDefaultContextConfig>
		<context><c path="bpmjs.Context"/></context>
		<contextConfig><c path="bpmjs.ContextConfig"/></contextConfig>
		<configureInternal set="method" line="56"><f a="object">
	<d/>
	<e path="Void"/>
</f></configureInternal>
		<buildInternal set="method" line="62"><f a="configClasses">
	<c path="Array"><c path="Class"><d/></c></c>
	<e path="Void"/>
</f></buildInternal>
		<createObjects set="method" line="71"><f a="configClass">
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></createObjects>
		<configureDynamicObjects set="method" line="117"><f a="objects">
	<c path="Array"><c path="bpmjs.ContextObject"/></c>
	<e path="Void"/>
</f></configureDynamicObjects>
		<wireContextObject set="method" line="129"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></wireContextObject>
		<findObservers set="method" line="178"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></findObservers>
		<registerMessengerByObjectType set="method" line="192"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></registerMessengerByObjectType>
		<registerMessengers set="method" line="200"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></registerMessengers>
		<registerReceivers set="method" line="213"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></registerReceivers>
		<doObserve set="method" line="227"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></doObserve>
		<doCompleteCall set="method" line="233"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></doCompleteCall>
		<doPostCompleteCall set="method" line="238"><f a="contextObject">
	<c path="bpmjs.ContextObject"/>
	<e path="Void"/>
</f></doPostCompleteCall>
		<createError set="method" line="243"><f a="message">
	<c path="String"/>
	<c path="String"/>
</f></createError>
		<new set="method" line="51"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmgl.TestMatrix4Basics" params="" file="construct/src_test/bpmgl/TestMatrix4Basics.hx">
		<extends path="bpmgl.Matrix4TestCase"/>
		<testNOrder public="1" set="method" line="5"><f a=""><e path="Void"/></f></testNOrder>
		<testBufferOrder public="1" set="method" line="27"><f a=""><e path="Void"/></f></testBufferOrder>
		<testIsIdentityAtConstruct public="1" set="method" line="64"><f a=""><e path="Void"/></f></testIsIdentityAtConstruct>
		<testSet public="1" set="method" line="70"><f a=""><e path="Void"/></f></testSet>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._Messenger.ReceiverForType" params="" file="construct/src_bpmjs/bpmjs/Messenger.hx" private="1" module="bpmjs.Messenger">
		<type public="1"><c path="Class"><d/></c></type>
		<method public="1"><f a="">
	<d/>
	<e path="Void"/>
</f></method>
		<new public="1" set="method" line="50"><f a="type:method">
	<c path="Class"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="reflect.MetadataTest" params="" file="construct/src_test/reflect/MetadataTest.hx">
		<extends path="TestCase2"/>
		<testProperty public="1" set="method" line="5"><f a=""><e path="Void"/></f></testProperty>
		<testMethod public="1" set="method" line="16"><f a=""><e path="Void"/></f></testMethod>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Array" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="Log" params="" file="construct/src_bpmjs/Log.hx">
		<filters line="6" static="1"><c path="Array"><c path="LogFilter"/></c></filters>
		<posInfo static="1"><t path="haxe.PosInfos"/></posInfo>
		<args line="8" static="1"><c path="Array"><d/></c></args>
		<errors line="9" static="1"><c path="Array"><c path="String"/></c></errors>
		<errorDiv static="1"><t path="js.HtmlDom"/></errorDiv>
		<debugger public="1" get="inline" set="null" line="12" static="1"><f a=""><e path="Void"/></f></debugger>
		<profile public="1" get="inline" set="null" line="17" static="1"><f a="title">
	<c path="String"/>
	<e path="Void"/>
</f></profile>
		<profileEnd public="1" get="inline" set="null" line="22" static="1"><f a=""><e path="Void"/></f></profileEnd>
		<init public="1" set="method" line="27" static="1"><f a=""><e path="Void"/></f></init>
		<addFilter public="1" set="method" line="41" static="1"><f a="filter">
	<c path="LogFilter"/>
	<e path="Void"/>
</f></addFilter>
		<info public="1" get="inline" set="null" line="46" static="1"><f a="?m0:?m1:?m2:?m3:?m4:?m5:?m6:?i">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></info>
		<warn public="1" get="inline" set="null" line="56" static="1"><f a="?m0:?m1:?m2:?m3:?m4:?m5:?m6:?i">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></warn>
		<error public="1" get="inline" set="null" line="66" static="1"><f a="?m0:?m1:?m2:?m3:?m4:?m5:?m6:?i">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></error>
		<infoEnabled public="1" set="method" line="77" static="1"><f a="i">
	<t path="haxe.PosInfos"/>
	<e path="Bool"/>
</f></infoEnabled>
		<warnEnabled public="1" set="method" line="83" static="1"><f a="i">
	<t path="haxe.PosInfos"/>
	<e path="Bool"/>
</f></warnEnabled>
		<errorEnabled public="1" set="method" line="89" static="1"><f a="i">
	<t path="haxe.PosInfos"/>
	<e path="Bool"/>
</f></errorEnabled>
		<groupCollapsed public="1" get="inline" set="null" line="95" static="1"><f a="?m0:?m1:?m2:?m3:?m4:?m5:?m6:?i">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></groupCollapsed>
		<groupEnd public="1" set="method" line="104" static="1"><f a="?i">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></groupEnd>
		<fetchInput set="method" line="110" static="1"><f a="?m0:?m1:?m2:?m3:?m4:?m5:?m6">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></fetchInput>
		<createMessage set="method" line="122" static="1"><f a=""><c path="String"/></f></createMessage>
		<createErrorMessage set="method" line="131" static="1"><f a=""><c path="String"/></f></createErrorMessage>
		<filter set="method" line="140" static="1"><f a="level">
	<c path="LogLevel"/>
	<e path="Bool"/>
</f></filter>
		<infoConsole set="method" line="153" static="1"><f a="v:?i">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></infoConsole>
		<displayError set="method" line="160" static="1"><f a="message">
	<c path="String"/>
	<e path="Void"/>
</f></displayError>
		<errorFilter set="method" line="181"><f a=""><e path="Void"/></f></errorFilter>
	</class>
	<class path="Enum" params="T" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="bpmjs.ProgressMonitor" params="" file="construct/src_bpmjs/bpmjs/ProgressMonitor.hx">
		<name public="1"><c path="String"/></name>
		<weight public="1"><c path="Float"/></weight>
		<current public="1" get="getCurrent" set="setCurrent"><c path="Float"/></current>
		<children><c path="Array"><c path="bpmjs._ProgressMonitor.MonitorAndTotal"/></c></children>
		<reset public="1" set="method" line="18"><f a=""><e path="Void"/></f></reset>
		<append public="1" set="method" line="25"><f a="monitor:total">
	<c path="bpmjs.ProgressMonitor"/>
	<c path="Float"/>
	<c path="bpmjs.ProgressMonitor"/>
</f></append>
		<done public="1" set="method" line="36"><f a=""><e path="Void"/></f></done>
		<getCurrent set="method" line="41"><f a=""><c path="Float"/></f></getCurrent>
		<setCurrent set="method" line="64"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setCurrent>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._ProgressMonitor.MonitorAndTotal" params="" file="construct/src_bpmjs/bpmjs/ProgressMonitor.hx" private="1" module="bpmjs.ProgressMonitor">
		<total public="1"><c path="Float"/></total>
		<monitor public="1"><c path="bpmjs.ProgressMonitor"/></monitor>
		<new public="1" set="method" line="76"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.TestInjectById" params="" file="construct/src_test/bpmjs/TestInjectById.hx">
		<extends path="TestCase2"/>
		<testInject public="1" set="method" line="5"><f a=""><e path="Void"/></f></testInject>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInjectById.TestConfig" params="" file="construct/src_test/bpmjs/TestInjectById.hx" private="1" module="bpmjs.TestInjectById">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="26" static="1"><c path="String"/></__rtti>
		<a1 public="1"><c path="bpmjs._TestInjectById.A"/></a1>
		<a2 public="1"><c path="bpmjs._TestInjectById.A"/></a2>
		<a3 public="1"><c path="bpmjs._TestInjectById.A"/></a3>
		<new public="1" set="method" line="32"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestInjectById.A" params="" file="construct/src_test/bpmjs/TestInjectById.hx" private="1" module="bpmjs.TestInjectById">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="45" static="1"><d/></__meta__>
		<__rtti public="1" line="45" static="1"><c path="String"/></__rtti>
		<a1 public="1"><c path="bpmjs._TestInjectById.A"/></a1>
		<a3 public="1"><c path="bpmjs._TestInjectById.A"/></a3>
		<a2 public="1"><c path="bpmjs._TestInjectById.A"/></a2>
		<value public="1"><c path="Int"/></value>
		<new public="1" set="method" line="58"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="reflect.Property" params="" file="construct/src_reflect/reflect/Property.hx">
		<extends path="reflect.Field"/>
		<getValue public="1" get="inline" set="null" line="7"><f a="instance">
	<d/>
	<d/>
</f></getValue>
		<setValue public="1" get="inline" set="null" line="12"><f a="instance:value">
	<d/>
	<d/>
	<e path="Void"/>
</f></setValue>
		<new public="1" set="method" line="5"><f a="field:definedInClass:owner">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Log" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="hsl.haxe.Subject" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/hsl/haxe/Subject.hx">
		<a/>
		<haxe_doc><![CDATA[
 * A subject is an object that might have internal state changes, which could be of interest to their environment. It notifies
 * its environment of such state changes by dispatching signals, rather than directly calling one of the methods of the
 * listeners. Subjects dispatch signals through signalers. Listeners can add themselves to those signalers.
 * 
 * Use of this technique results in low coupling between the subjects and their listeners. See
 * <a href="http://en.wikipedia.org/wiki/Coupling_(computer_science)">Coupling</a> on Wikipedia for more information.
 * 
 * Any class can act as a subject. Subjects can have any number of signalers.
 * 
 * In this example, the "buddy" variable (an instance of the "Dog" class) is a subject. The main class is a listener.
 * <pre>
 * package;
 * import hsl.haxe.direct.DirectSignaler;
 * import hsl.haxe.Signaler;
 * class Main {
 * 	public static function traceSound(sound:String):Void {
 * 		trace(sound);
 * 	}
 * 	public static function main():Void {
 * 		var buddy:Dog = new Dog();
 * 		buddy.barkedSignaler.bind(traceSound);
 * 		buddy.bark();
 * 	}
 * }
 * class Dog {
 * 	public var barkedSignaler(default, null):Signaler&lt;String&gt;;
 * 	public function new():Void {
 * 		barkedSignaler = new DirectSignaler(this);
 * 	}
 * 	public inline function bark():Void {
 * 		barkedSignaler.dispatch("Woof");
 * 	}
 * }
 * </pre>
 ]]></haxe_doc>
	</typedef>
	<class path="Std" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="reflect.Method" params="" file="construct/src_reflect/reflect/Method.hx">
		<extends path="reflect.Field"/>
		<parameters public="1" get="getParameters" set="null"><c path="Array"><c path="reflect.Parameter"/></c></parameters>
		<args><c path="List"><t path="reflect.ParamDef"/></c></args>
		<ret><e path="haxe.rtti.CType"/></ret>
		<getParameters set="method" line="20"><f a=""><c path="Array"><c path="reflect.Parameter"/></c></f></getParameters>
		<call public="1" set="method" line="35"><f a="instance:params">
	<d/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></call>
		<new public="1" set="method" line="13"><f a="field:args:ret:definedInClass:owner">
	<t path="haxe.rtti.ClassField"/>
	<c path="List"><t path="reflect.ParamDef"/></c>
	<e path="haxe.rtti.CType"/>
	<c path="String"/>
	<c path="reflect.ClassInfo"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="bpmjs.TestComplete" params="" file="construct/src_test/bpmjs/TestComplete.hx">
		<extends path="TestCase2"/>
		<completeCount public="1" static="1"><c path="Int"/></completeCount>
		<postCompleteCount public="1" static="1"><c path="Int"/></postCompleteCount>
		<setup public="1" set="method" line="8" override="1"><f a=""><e path="Void"/></f></setup>
		<testComplete public="1" set="method" line="14"><f a=""><e path="Void"/></f></testComplete>
		<testPostComplete public="1" set="method" line="20"><f a=""><e path="Void"/></f></testPostComplete>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestComplete.TestConfigWithA" params="" file="construct/src_test/bpmjs/TestComplete.hx" private="1" module="bpmjs.TestComplete">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="27" static="1"><c path="String"/></__rtti>
		<a public="1"><c path="bpmjs._TestComplete.A"/></a>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs._TestComplete.A" params="" file="construct/src_test/bpmjs/TestComplete.hx" private="1" module="bpmjs.TestComplete">
		<implements path="haxe.rtti.Infos"/>
		<__meta__ public="1" line="37" static="1"><d/></__meta__>
		<__rtti public="1" line="37" static="1"><c path="String"/></__rtti>
		<handleContextComplete public="1" set="method" line="44"><f a=""><e path="Void"/></f></handleContextComplete>
		<handleContextPostComplete public="1" set="method" line="50"><f a=""><e path="Void"/></f></handleContextPostComplete>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.TypeTools" params="" file="/usr/lib/haxe/lib/hsl-pico-1/1,6/haxe/TypeTools.hx">
		<getClassNames public="1" set="method" line="40" static="1">
			<f a="value">
				<d/>
				<c path="List"><c path="String"/></c>
			</f>
			<haxe_doc>
	 * Returns a list of all the complete names of all the classes the passed value is an instance of. If the passed value itself
	 * is a class, this method will return a list containing its complete name and all its super classes. If you pass an instance
	 * of Sprite, for instance, this method will return a list containing "flash.display.Sprite",
	 * "flash.display.DisplayObjectContainer", "flash.display.InteractiveObject", "flash.display.DisplayObject" and
	 * "flash.events.EventDispatcher".
	 </haxe_doc>
		</getClassNames>
		<haxe_doc>
 * More advanced operations for reflection.
 </haxe_doc>
	</class>
	<class path="bpmgl.TestMatrix4Append" params="" file="construct/src_test/bpmgl/TestMatrix4Append.hx">
		<extends path="bpmgl.Matrix4TestCase"/>
		<m public="1"><c path="Matrix4"/></m>
		<setup public="1" set="method" line="7" override="1"><f a=""><e path="Void"/></f></setup>
		<testAppend public="1" set="method" line="18"><f a=""><e path="Void"/></f></testAppend>
		<testAppendTranslation public="1" set="method" line="31"><f a=""><e path="Void"/></f></testAppendTranslation>
		<testAppendScale public="1" set="method" line="37"><f a=""><e path="Void"/></f></testAppendScale>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="kumite.scene.LayerState" params="" file="construct/src/kumite/scene/LayerState.hx">
		<OUT public="1" line="5" static="1"><c path="kumite.scene.LayerState"/></OUT>
		<IN public="1" line="6" static="1"><c path="kumite.scene.LayerState"/></IN>
		<KEEP public="1" line="7" static="1"><c path="kumite.scene.LayerState"/></KEEP>
		<name public="1" set="null"><c path="String"/></name>
		<new set="method" line="11"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="kumite.scene.Layer" params="" file="construct/src/kumite/scene/Layer.hx">
		<implements path="kumite.scene.LayerLifecycle"/>
		<layerId public="1"><c path="String"/></layerId>
		<state public="1"><c path="kumite.scene.LayerState"/></state>
		<init public="1" set="method" line="11"><f a=""><e path="Void"/></f></init>
		<render public="1" set="method" line="13"><f a="renderContext">
	<c path="kumite.scene.RenderContext"/>
	<e path="Void"/>
</f></render>
		<renderTransition public="1" set="method" line="15"><f a="transitionContext">
	<c path="kumite.scene.TransitionContext"/>
	<e path="Void"/>
</f></renderTransition>
		<new public="1" set="method" line="9"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="reflect.ParamDef" params="" file="construct/src_reflect/reflect/Parameter.hx" module="reflect.Parameter"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<class path="reflect.Parameter" params="" file="construct/src_reflect/reflect/Parameter.hx">
		<type public="1" get="getType" set="null"><c path="reflect.ClassInfo"/></type>
		<def><t path="reflect.ParamDef"/></def>
		<getType get="inline" set="null" line="23"><f a=""><c path="reflect.ClassInfo"/></f></getType>
		<new public="1" set="method" line="18"><f a="def">
	<t path="reflect.ParamDef"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="116" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="134" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="148" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="163" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="212" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="232" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="reflect.PropertyTest" params="" file="construct/src_test/reflect/PropertyTest.hx">
		<extends path="TestCase2"/>
		<testGetValue public="1" set="method" line="5"><f a=""><e path="Void"/></f></testGetValue>
		<testSetValue public="1" set="method" line="17"><f a=""><e path="Void"/></f></testSetValue>
		<new public="1" set="method" line="3"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="TestRunner" params="" file="construct/src_test/TestRunner.hx">
		<main set="method" line="6" static="1"><f a=""><e path="Void"/></f></main>
		<addTests set="method" line="25"><f a="runner">
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></addTests>
		<runTimes set="method" line="33"><f a="times:runner">
	<c path="Int"/>
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></runTimes>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="ArrayBuffer" params="" file="construct/src_extern/ArrayBuffer.hx" extern="1">
		<byteLength public="1"><c path="Int"/></byteLength>
		<new public="1" set="method"><f a="size">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><e path="Bool"/></success>
		<add public="1" set="method" line="37"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<e path="Void"/>
</f></add>
		<toString public="1" set="method" line="43"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="reflect.ClassInfoTest" params="" file="construct/src_test/reflect/ClassInfoTest.hx">
		<extends path="TestCase2"/>
		<testForClass public="1" set="method" line="7"><f a=""><e path="Void"/></f></testForClass>
		<testForInstance public="1" set="method" line="13"><f a=""><e path="Void"/></f></testForInstance>
		<testForName public="1" set="method" line="19"><f a=""><e path="Void"/></f></testForName>
		<testForCClassInt public="1" set="method" line="25"><f a=""><e path="Void"/></f></testForCClassInt>
		<testNoRTTIModel public="1" set="method" line="32"><f a=""><e path="Void"/></f></testNoRTTIModel>
		<testType public="1" set="method" line="43"><f a=""><e path="Void"/></f></testType>
		<testProperties public="1" set="method" line="53"><f a=""><e path="Void"/></f></testProperties>
		<testEnum public="1" set="method" line="64"><f a=""><e path="Void"/></f></testEnum>
		<testMethods public="1" set="method" line="71"><f a=""><e path="Void"/></f></testMethods>
		<getCClassInt set="method" line="83"><f a=""><e path="haxe.rtti.CType"/></f></getCClassInt>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="reflect.CClassInt" params="" file="construct/src_test/reflect/ClassInfoTest.hx" module="reflect.ClassInfoTest">
		<implements path="haxe.rtti.Infos"/>
		<__rtti public="1" line="110" static="1"><c path="String"/></__rtti>
		<int public="1"><c path="Int"/></int>
	</class>
	<class path="bpmgl.Tests" params="" file="construct/src_test/bpmgl/Tests.hx"><addTo public="1" set="method" line="5" static="1"><f a="runner">
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></addTo></class>
	<class path="kumite.scene.Scene" params="" file="construct/src/kumite/scene/Scene.hx">
		<layers public="1"><c path="Array"><c path="kumite.scene.Layer"/></c></layers>
		<id public="1"><c path="String"/></id>
		<name public="1"><c path="String"/></name>
		<addLayer public="1" set="method" line="16"><f a="layer">
	<c path="kumite.scene.Layer"/>
	<e path="Void"/>
</f></addLayer>
		<containsLayer public="1" set="method" line="21"><f a="layer">
	<c path="kumite.scene.Layer"/>
	<e path="Bool"/>
</f></containsLayer>
		<getLayerIndex public="1" set="method" line="32"><f a="layer">
	<c path="kumite.scene.Layer"/>
	<c path="Int"/>
</f></getLayerIndex>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="bpmjs.Tests" params="" file="construct/src_test/bpmjs/Tests.hx"><addTo public="1" set="method" line="5" static="1"><f a="runner">
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></addTo></class>
	<class path="Matrix4" params="" file="construct/src_bpmgl/Matrix4.hx">
		<IDENTITY_BUFFER line="8" static="1"><c path="Float32Array"/></IDENTITY_BUFFER>
		<tempMatrix1 line="9" static="1"><c path="Matrix4"/></tempMatrix1>
		<tempMatrix2 line="10" static="1"><c path="Matrix4"/></tempMatrix2>
		<createIdentityBuffer set="method" line="11" static="1"><f a=""><c path="Float32Array"/></f></createIdentityBuffer>
		<i11 get="inline" set="null" line="443" static="1"><c path="Int"/></i11>
		<i12 get="inline" set="null" line="444" static="1"><c path="Int"/></i12>
		<i13 get="inline" set="null" line="445" static="1"><c path="Int"/></i13>
		<i14 get="inline" set="null" line="446" static="1"><c path="Int"/></i14>
		<i21 get="inline" set="null" line="448" static="1"><c path="Int"/></i21>
		<i22 get="inline" set="null" line="449" static="1"><c path="Int"/></i22>
		<i23 get="inline" set="null" line="450" static="1"><c path="Int"/></i23>
		<i24 get="inline" set="null" line="451" static="1"><c path="Int"/></i24>
		<i31 get="inline" set="null" line="453" static="1"><c path="Int"/></i31>
		<i32 get="inline" set="null" line="454" static="1"><c path="Int"/></i32>
		<i33 get="inline" set="null" line="455" static="1"><c path="Int"/></i33>
		<i34 get="inline" set="null" line="456" static="1"><c path="Int"/></i34>
		<i41 get="inline" set="null" line="458" static="1"><c path="Int"/></i41>
		<i42 get="inline" set="null" line="459" static="1"><c path="Int"/></i42>
		<i43 get="inline" set="null" line="460" static="1"><c path="Int"/></i43>
		<i44 get="inline" set="null" line="461" static="1"><c path="Int"/></i44>
		<buffer public="1"><c path="Float32Array"/></buffer>
		<n11 public="1" get="get11" set="set11"><c path="Float"/></n11>
		<n12 public="1" get="get12" set="set12"><c path="Float"/></n12>
		<n13 public="1" get="get13" set="set13"><c path="Float"/></n13>
		<n14 public="1" get="get14" set="set14"><c path="Float"/></n14>
		<n21 public="1" get="get21" set="set21"><c path="Float"/></n21>
		<n22 public="1" get="get22" set="set22"><c path="Float"/></n22>
		<n23 public="1" get="get23" set="set23"><c path="Float"/></n23>
		<n24 public="1" get="get24" set="set24"><c path="Float"/></n24>
		<n31 public="1" get="get31" set="set31"><c path="Float"/></n31>
		<n32 public="1" get="get32" set="set32"><c path="Float"/></n32>
		<n33 public="1" get="get33" set="set33"><c path="Float"/></n33>
		<n34 public="1" get="get34" set="set34"><c path="Float"/></n34>
		<n41 public="1" get="get41" set="set41"><c path="Float"/></n41>
		<n42 public="1" get="get42" set="set42"><c path="Float"/></n42>
		<n43 public="1" get="get43" set="set43"><c path="Float"/></n43>
		<n44 public="1" get="get44" set="set44"><c path="Float"/></n44>
		<setIdentity public="1" set="method" line="60"><f a=""><c path="Matrix4"/></f></setIdentity>
		<set public="1" set="method" line="65"><f a="n11:n12:n13:n14:n21:n22:n23:n24:n31:n32:n33:n34:n41:n42:n43:n44">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Matrix4"/>
</f></set>
		<setFrom public="1" set="method" line="90"><f a="from">
	<c path="Matrix4"/>
	<c path="Matrix4"/>
</f></setFrom>
		<setTranslation public="1" set="method" line="96"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Matrix4"/>
</f></setTranslation>
		<setScale public="1" set="method" line="107"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Matrix4"/>
</f></setScale>
		<setRotationX public="1" set="method" line="118"><f a="angle">
	<c path="Float"/>
	<c path="Matrix4"/>
</f></setRotationX>
		<setRotationY public="1" set="method" line="130"><f a="angle">
	<c path="Float"/>
	<c path="Matrix4"/>
</f></setRotationY>
		<setRotationZ public="1" set="method" line="142"><f a="angle">
	<c path="Float"/>
	<c path="Matrix4"/>
</f></setRotationZ>
		<setRotation public="1" set="method" line="154"><f a="angle:axis">
	<c path="Float"/>
	<c path="Vec3"/>
	<c path="Matrix4"/>
</f></setRotation>
		<setLookAt public="1" set="method" line="173"><f a="eye:at:up">
	<c path="Vec3"/>
	<c path="Vec3"/>
	<c path="Vec3"/>
	<e path="Void"/>
</f></setLookAt>
		<setOrtho public="1" set="method" line="257"><f a="left:right:bottom:top:near:far">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setOrtho>
		<setPerspective public="1" set="method" line="284"><f a="fovy:aspect:near:far">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setPerspective>
		<setFrustum public="1" set="method" line="291"><f a="left:right:bottom:top:near:far">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setFrustum>
		<append public="1" set="method" line="318"><f a="a">
	<c path="Matrix4"/>
	<e path="Void"/>
</f></append>
		<appendAffine public="1" set="method" line="354"><f a="a">
	<c path="Matrix4"/>
	<e path="Void"/>
</f></appendAffine>
		<appendTranslation public="1" set="method" line="383"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<appendTranslationAffine public="1" set="method" line="389"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslationAffine>
		<appendScale public="1" set="method" line="395"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendRotation public="1" set="method" line="401"><f a="angle:axis">
	<c path="Float"/>
	<c path="Vec3"/>
	<e path="Void"/>
</f></appendRotation>
		<appendRotationZ public="1" set="method" line="407"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></appendRotationZ>
		<appendScaleAffine public="1" set="method" line="413"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScaleAffine>
		<appendRotationAffine public="1" set="method" line="419"><f a="angle:axis">
	<c path="Float"/>
	<c path="Vec3"/>
	<e path="Void"/>
</f></appendRotationAffine>
		<appendRotationZAffine public="1" set="method" line="425"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></appendRotationZAffine>
		<toString public="1" set="method" line="431"><f a=""><c path="String"/></f></toString>
		<get11 get="inline" set="null" line="463"><f a=""><c path="Float"/></f></get11>
		<set11 get="inline" set="null" line="463"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set11>
		<get12 get="inline" set="null" line="464"><f a=""><c path="Float"/></f></get12>
		<set12 get="inline" set="null" line="464"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set12>
		<get13 get="inline" set="null" line="465"><f a=""><c path="Float"/></f></get13>
		<set13 get="inline" set="null" line="465"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set13>
		<get14 get="inline" set="null" line="466"><f a=""><c path="Float"/></f></get14>
		<set14 get="inline" set="null" line="466"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set14>
		<get21 get="inline" set="null" line="468"><f a=""><c path="Float"/></f></get21>
		<set21 get="inline" set="null" line="468"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set21>
		<get22 get="inline" set="null" line="469"><f a=""><c path="Float"/></f></get22>
		<set22 get="inline" set="null" line="469"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set22>
		<get23 get="inline" set="null" line="470"><f a=""><c path="Float"/></f></get23>
		<set23 get="inline" set="null" line="470"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set23>
		<get24 get="inline" set="null" line="471"><f a=""><c path="Float"/></f></get24>
		<set24 get="inline" set="null" line="471"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set24>
		<get31 get="inline" set="null" line="473"><f a=""><c path="Float"/></f></get31>
		<set31 get="inline" set="null" line="473"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set31>
		<get32 get="inline" set="null" line="474"><f a=""><c path="Float"/></f></get32>
		<set32 get="inline" set="null" line="474"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set32>
		<get33 get="inline" set="null" line="475"><f a=""><c path="Float"/></f></get33>
		<set33 get="inline" set="null" line="475"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set33>
		<get34 get="inline" set="null" line="476"><f a=""><c path="Float"/></f></get34>
		<set34 get="inline" set="null" line="476"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set34>
		<get41 get="inline" set="null" line="478"><f a=""><c path="Float"/></f></get41>
		<set41 get="inline" set="null" line="478"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set41>
		<get42 get="inline" set="null" line="479"><f a=""><c path="Float"/></f></get42>
		<set42 get="inline" set="null" line="479"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set42>
		<get43 get="inline" set="null" line="480"><f a=""><c path="Float"/></f></get43>
		<set43 get="inline" set="null" line="480"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set43>
		<get44 get="inline" set="null" line="481"><f a=""><c path="Float"/></f></get44>
		<set44 get="inline" set="null" line="481"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></set44>
		<new public="1" set="method" line="55"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Date" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="js.Lib" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/js/Lib.hx">
		<isIE public="1" static="1"><e path="Bool"/></isIE>
		<isOpera public="1" static="1"><e path="Bool"/></isOpera>
		<document public="1" static="1"><t path="js.Document"/></document>
		<window public="1" static="1"><t path="js.Window"/></window>
		<onerror line="35" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Bool"/>
</f></onerror>
		<alert public="1" set="method" line="37" static="1"><f a="v">
	<d/>
	<e path="Void"/>
</f></alert>
		<eval public="1" set="method" line="41" static="1"><f a="code">
	<c path="String"/>
	<d/>
</f></eval>
		<setErrorHandler public="1" set="method" line="45" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<e path="Bool"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="reflect.Tests" params="" file="construct/src_test/reflect/Tests.hx"><addTo public="1" set="method" line="5" static="1"><f a="runner">
	<c path="haxe.unit.TestRunner"/>
	<e path="Void"/>
</f></addTo></class>
	<class path="reflect.model.NoRtti" params="" file="construct/src_test/reflect/model/NoRtti.hx"/>
	<class path="kumite.scene.SceneMixer" params="" file="construct/src/kumite/scene/SceneMixer.hx">
		<from><c path="kumite.scene.Scene"/></from>
		<to><c path="kumite.scene.Scene"/></to>
		<mix public="1" set="method" line="10"><f a="from:to">
	<c path="kumite.scene.Scene"/>
	<c path="kumite.scene.Scene"/>
	<c path="kumite.scene.Scene"/>
</f></mix>
		<sorter set="method" line="40"><f a="a:b">
	<c path="kumite.scene.Layer"/>
	<c path="kumite.scene.Layer"/>
	<c path="Int"/>
</f></sorter>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringTools" params="" file="/Users/Shared/Tools/haXe/haxe-2.08-osx/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
</haxe>