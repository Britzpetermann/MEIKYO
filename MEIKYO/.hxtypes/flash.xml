<haxe>
	<class path="haxe.rtti.XmlParser" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="38"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></sort>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="Null"><t path="haxe.rtti.ClassField"/></t></c>
</f></sortFields>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<mergeRights set="method" line="90"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeRights>
		<mergeFields set="method" line="99"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeFields>
		<mergeClasses set="method" line="103"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="139"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="159"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<merge set="method" line="167"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mkPath set="method" line="233"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="237"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="244"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="254"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="258"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="264"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xpath set="method" line="274"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="285"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="321"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xenum set="method" line="343"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="363"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xtypedef set="method" line="391"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="414"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="465"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="472"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.MovieClipLoader" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/MovieClipLoader.hx" extern="1">
		<getProgress public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<a>
		<bytesTotal><c path="Int"/></bytesTotal>
		<bytesLoaded><c path="Int"/></bytesLoaded>
	</a>
</f></getProgress>
		<loadClip public="1" set="method"><f a="url:target">
	<c path="String"/>
	<c path="flash.MovieClip"/>
	<e path="Bool"/>
</f></loadClip>
		<unloadClip public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<e path="Bool"/>
</f></unloadClip>
		<onLoadInit public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></onLoadInit>
		<onLoadStart public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></onLoadStart>
		<onLoadProgress public="1" set="dynamic"><f a="target:loaded:total">
	<c path="flash.MovieClip"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></onLoadProgress>
		<onLoadComplete public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></onLoadComplete>
		<onLoadError public="1" set="dynamic"><f a="target:error">
	<c path="flash.MovieClip"/>
	<c path="String"/>
	<e path="Void"/>
</f></onLoadError>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<haxe_doc> in FP 9 </haxe_doc>
		</checkPolicyFile>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Enum" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="List" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="IntIter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/BitmapFilter.hx" extern="1"/>
	<class path="flash.system.Capabilities" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/system/Capabilities.hx" extern="1">
		<hasAudio public="1" static="1"><e path="Bool"/></hasAudio>
		<hasMP3 public="1" static="1"><e path="Bool"/></hasMP3>
		<hasAudioEncoder public="1" static="1"><e path="Bool"/></hasAudioEncoder>
		<hasVideoEncoder public="1" static="1"><e path="Bool"/></hasVideoEncoder>
		<screenResolutionX public="1" static="1"><c path="Float"/></screenResolutionX>
		<screenResolutionY public="1" static="1"><c path="Float"/></screenResolutionY>
		<screenDPI public="1" static="1"><c path="Float"/></screenDPI>
		<screenColor public="1" static="1"><c path="String"/></screenColor>
		<pixelAspectRatio public="1" static="1"><c path="Float"/></pixelAspectRatio>
		<hasAccessibility public="1" static="1"><e path="Bool"/></hasAccessibility>
		<input public="1" static="1"><c path="String"/></input>
		<isDebugger public="1" static="1"><e path="Bool"/></isDebugger>
		<language public="1" static="1"><c path="String"/></language>
		<manufacturer public="1" static="1"><c path="String"/></manufacturer>
		<os public="1" static="1"><c path="String"/></os>
		<serverString public="1" static="1"><c path="String"/></serverString>
		<version public="1" static="1"><c path="String"/></version>
		<hasPrinting public="1" static="1"><e path="Bool"/></hasPrinting>
		<playerType public="1" static="1"><c path="String"/></playerType>
		<hasStreamingAudio public="1" static="1"><e path="Bool"/></hasStreamingAudio>
		<hasScreenBroadcast public="1" static="1"><e path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" static="1"><e path="Bool"/></hasScreenPlayback>
		<hasStreamingVideo public="1" static="1"><e path="Bool"/></hasStreamingVideo>
		<hasEmbeddedVideo public="1" static="1"><e path="Bool"/></hasEmbeddedVideo>
		<avHardwareDisable public="1" static="1"><e path="Bool"/></avHardwareDisable>
		<localFileReadDisable public="1" static="1"><e path="Bool"/></localFileReadDisable>
		<windowlessDisable public="1" static="1"><e path="Bool"/></windowlessDisable>
		<hasCompoundSound public="1" static="1"><e path="Bool"/></hasCompoundSound>
		<hasEmail public="1" static="1"><e path="Bool"/></hasEmail>
		<hasMMS public="1" static="1"><e path="Bool"/></hasMMS>
		<hasSMS public="1" static="1"><e path="Bool"/></hasSMS>
		<hasMFI public="1" static="1"><e path="Bool"/></hasMFI>
		<hasMIDI public="1" static="1"><e path="Bool"/></hasMIDI>
		<hasSMAF public="1" static="1"><e path="Bool"/></hasSMAF>
		<hasDataLoading public="1" static="1"><e path="Bool"/></hasDataLoading>
		<has4WayKeyAS public="1" static="1"><e path="Bool"/></has4WayKeyAS>
		<hasMouse public="1" static="1"><e path="Bool"/></hasMouse>
		<hasMappableSoftKeys public="1" static="1"><e path="Bool"/></hasMappableSoftKeys>
		<hasCMIDI public="1" static="1"><e path="Bool"/></hasCMIDI>
		<hasStylus public="1" static="1"><e path="Bool"/></hasStylus>
		<screenOrientation public="1" static="1"><c path="String"/></screenOrientation>
		<hasSharedObjects public="1" static="1"><e path="Bool"/></hasSharedObjects>
		<hasQWERTYKeyboard public="1" static="1"><e path="Bool"/></hasQWERTYKeyboard>
		<softKeyCount public="1" static="1"><c path="Float"/></softKeyCount>
		<audioMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></audioMIMETypes>
		<imageMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></imageMIMETypes>
		<videoMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></videoMIMETypes>
		<MIMETypes public="1" static="1"><c path="String"/></MIMETypes>
	</class>
	<class path="String" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="Hash" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Hash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="Array" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="flash.text.StyleSheet" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/text/StyleSheet.hx" extern="1">
		<getStyle public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getStyle>
		<setStyle public="1" set="method"><f a="name:style">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setStyle>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<getStyleNames public="1" set="method"><f a=""><c path="Array"><d/></c></f></getStyleNames>
		<transform public="1" set="method"><f a="style">
	<d/>
	<c path="flash.TextFormat"/>
</f></transform>
		<parseCSS public="1" set="method"><f a="cssText">
	<c path="String"/>
	<e path="Bool"/>
</f></parseCSS>
		<parse public="1" set="method"><f a="cssText">
	<c path="String"/>
	<e path="Bool"/>
</f></parse>
		<load public="1" set="method"><f a="url">
	<c path="String"/>
	<e path="Bool"/>
</f></load>
		<onLoad public="1" set="dynamic"><f a="success">
	<e path="Bool"/>
	<e path="Void"/>
</f></onLoad>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="IntHash" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/IntHash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="59">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/JSGenApi.hx">
		<a>
			<types><c path="Array"><e path="haxe.macro.Type"/></c></types>
			<stackVar set="null"><c path="String"/></stackVar>
			<setTypeAccessor set="method"><f a="callb">
	<f a="">
		<e path="haxe.macro.Type"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></setTypeAccessor>
			<setDebugInfos set="method"><f a="c:meth:isStatic">
	<t path="haxe.macro.ClassType"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setDebugInfos>
			<quoteString set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quoteString>
			<outputFile><c path="String"/></outputFile>
			<main><t path="Null"><e path="haxe.macro.TypedExpr"/></t></main>
			<isKeyword set="method"><f a="ident">
	<c path="String"/>
	<e path="Bool"/>
</f></isKeyword>
			<generateExpr set="method"><f a="e">
	<e path="haxe.macro.TypedExpr"/>
	<c path="String"/>
</f></generateExpr>
			<generateConstructor set="method"><f a="e">
	<e path="haxe.macro.TypedExpr"/>
	<c path="String"/>
</f></generateConstructor>
			<excVar set="null"><c path="String"/></excVar>
			<buildMetaData set="method"><f a="t">
	<t path="haxe.macro.BaseType"/>
	<t path="Null"><e path="haxe.macro.TypedExpr"/></t>
</f></buildMetaData>
		</a>
		<haxe_doc>
	This is the api that is passed to the custom JS generator.
</haxe_doc>
	</typedef>
	<class path="flash.TextField" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/TextField.hx" extern="1">
		<getFontList public="1" set="method" static="1"><f a=""><c path="Array"><d/></c></f></getFontList>
		<_x public="1"><c path="Float"/></_x>
		<_y public="1"><c path="Float"/></_y>
		<_xmouse public="1"><c path="Float"/></_xmouse>
		<_ymouse public="1"><c path="Float"/></_ymouse>
		<_xscale public="1"><c path="Float"/></_xscale>
		<_yscale public="1"><c path="Float"/></_yscale>
		<_width public="1"><c path="Float"/></_width>
		<_height public="1"><c path="Float"/></_height>
		<_alpha public="1"><c path="Float"/></_alpha>
		<_visible public="1"><e path="Bool"/></_visible>
		<_target public="1"><c path="String"/></_target>
		<_rotation public="1"><c path="Float"/></_rotation>
		<_name public="1"><c path="String"/></_name>
		<_framesloaded public="1"><c path="Int"/></_framesloaded>
		<_droptarget public="1"><c path="String"/></_droptarget>
		<_currentframe public="1"><c path="Int"/></_currentframe>
		<_totalframes public="1"><c path="Int"/></_totalframes>
		<_quality public="1"><c path="String"/></_quality>
		<_focusrect public="1"><e path="Bool"/></_focusrect>
		<_soundbuftime public="1"><c path="Float"/></_soundbuftime>
		<_url public="1"><c path="String"/></_url>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<autoSize public="1"><d/></autoSize>
		<background public="1"><e path="Bool"/></background>
		<backgroundColor public="1"><c path="Int"/></backgroundColor>
		<border public="1"><e path="Bool"/></border>
		<borderColor public="1"><c path="Int"/></borderColor>
		<bottomScroll public="1"><c path="Float"/></bottomScroll>
		<condenseWhite public="1"><e path="Bool"/></condenseWhite>
		<embedFonts public="1"><e path="Bool"/></embedFonts>
		<hscroll public="1"><c path="Float"/></hscroll>
		<html public="1"><e path="Bool"/></html>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1"><c path="Int"/></length>
		<maxChars public="1"><c path="Int"/></maxChars>
		<maxhscroll public="1"><c path="Float"/></maxhscroll>
		<maxscroll public="1"><c path="Float"/></maxscroll>
		<multiline public="1"><e path="Bool"/></multiline>
		<password public="1"><e path="Bool"/></password>
		<restrict public="1"><c path="String"/></restrict>
		<scroll public="1"><c path="Float"/></scroll>
		<selectable public="1"><e path="Bool"/></selectable>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><c path="Int"/></textColor>
		<textHeight public="1"><c path="Float"/></textHeight>
		<textWidth public="1"><c path="Float"/></textWidth>
		<type public="1"><c path="String"/></type>
		<variable public="1"><c path="String"/></variable>
		<wordWrap public="1"><e path="Bool"/></wordWrap>
		<mouseWheelEnabled public="1"><e path="Bool"/></mouseWheelEnabled>
		<antiAliasType public="1"><c path="String"/></antiAliasType>
		<gridFitType public="1"><c path="String"/></gridFitType>
		<sharpness public="1"><c path="Float"/></sharpness>
		<filters public="1"><c path="Array"><d/></c></filters>
		<thickness public="1"><c path="Float"/></thickness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<replaceSel public="1" set="method"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></replaceSel>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.TextFormat"/>
</f></getTextFormat>
		<setTextFormat public="1" set="method"><f a="begin:?end:?tf">
	<d/>
	<d/>
	<c path="flash.TextFormat"/>
	<e path="Void"/>
</f></setTextFormat>
		<removeTextField public="1" set="method"><f a=""><e path="Void"/></f></removeTextField>
		<getNewTextFormat public="1" set="method"><f a=""><c path="flash.TextFormat"/></f></getNewTextFormat>
		<setNewTextFormat public="1" set="method"><f a="tf">
	<c path="flash.TextFormat"/>
	<e path="Void"/>
</f></setNewTextFormat>
		<getDepth public="1" set="method"><f a=""><c path="Int"/></f></getDepth>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
		<onChanged public="1" set="dynamic"><f a="changedField">
	<c path="flash.TextField"/>
	<e path="Void"/>
</f></onChanged>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<e path="Void"/>
</f></onKillFocus>
		<onScroller public="1" set="dynamic"><f a="scrolledField">
	<c path="flash.TextField"/>
	<e path="Void"/>
</f></onScroller>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<e path="Void"/>
</f></onSetFocus>
	</class>
	<class path="haxe.remoting.Context" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="58" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="Hash"><a>
	<rec><e path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="35"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addObject>
		<call public="1" set="method" line="39"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringTools" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="haxe.Firebug" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Firebug.hx">
		<detect public="1" set="method" line="29" static="1"><f a=""><e path="Bool"/></f></detect>
		<redirectTraces public="1" set="method" line="45" static="1"><f a=""><e path="Void"/></f></redirectTraces>
		<onError public="1" set="method" line="55" static="1"><f a="err:stack">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></onError>
		<trace public="1" set="method" line="65" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<knockout public="1"><e path="Bool"/></knockout>
		<strength public="1"><c path="Float"/></strength>
		<quality public="1"><c path="Float"/></quality>
		<inner public="1"><e path="Bool"/></inner>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><c path="Float"/></color>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GlowFilter"/></f></clone>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/FlashJsConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<connections line="81" static="1"><c path="Hash"><c path="haxe.remoting.FlashJsConnection"/></c></connections>
		<escapeString set="method" line="83" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<doCall set="method" line="91" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<connect public="1" set="method" line="111" static="1"><f a="name:objId:?ctx">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.FlashJsConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<queue><c path="haxe.TimerQueue"/></queue>
	<name><c path="String"/></name>
	<id><c path="String"/></id>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<close public="1" set="method" line="45"><f a=""><e path="Void"/></f></close>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="55"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="59"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<queue><c path="haxe.TimerQueue"/></queue>
		<name><c path="String"/></name>
		<id><c path="String"/></id>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.io.Bytes" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="211" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="239" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="278" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<getData public="1" get="inline" set="null" line="207"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<hideObject public="1"><e path="Bool"/></hideObject>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<knockout public="1"><e path="Bool"/></knockout>
		<strength public="1"><c path="Float"/></strength>
		<inner public="1"><e path="Bool"/></inner>
		<quality public="1"><c path="Float"/></quality>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><c path="Float"/></color>
		<angle public="1"><c path="Float"/></angle>
		<distance public="1"><c path="Float"/></distance>
		<clone public="1" set="method"><f a=""><c path="flash.filters.DropShadowFilter"/></f></clone>
		<new public="1" set="method"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextRenderer" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/text/TextRenderer.hx" extern="1">
		<maxLevel public="1" static="1"><c path="Float"/></maxLevel>
		<setAdvancedAntialiasingTable public="1" set="method" static="1"><f a="fontName:fontStyle:colorType:advancedAntialiasingTable">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></setAdvancedAntialiasingTable>
	</class>
	<class path="flash.Boot" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Boot.hx">
		<def_color line="29" static="1"><c path="Int"/></def_color>
		<exception line="30" static="1"><unknown/></exception>
		<__string_rec set="method" line="32" static="1"><f a="o:s">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__closure set="method" line="97" static="1"><f a="f:o">
	<c path="Int"/>
	<c path="Array"><unknown/></c>
	<f a=""><unknown/></f>
</f></__closure>
		<__instanceof set="method" line="126" static="1"><f a="o:cl">
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></__instanceof>
		<getTrace set="method" line="158" static="1"><f a=""><c path="flash.TextField"/></f></getTrace>
		<__set_trace_color set="method" line="177" static="1"><f a="rgb">
	<c path="Int"/>
	<e path="Void"/>
</f></__set_trace_color>
		<__trace set="method" line="182" static="1"><f a="v:inf">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__exc set="method" line="197" static="1"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></__exc>
		<__clear_trace set="method" line="212" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__init set="method" line="220" static="1"><f a="current">
	<d/>
	<e path="Void"/>
</f></__init>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><c path="Int"/></c></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/geom/Transform.hx" extern="1">
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<concatenatedMatrix public="1"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<pixelBounds public="1"><c path="flash.geom.Rectangle"><c path="Float"/></c></pixelBounds>
		<new public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.rtti.Infos" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/Infos.hx" interface="1"><haxe_doc>
	This is a magic interface. When a class implements [haxe.rtti.Infos], this class and all its
	subclass will get an additional static field [__rtti] storing the class type informations.
</haxe_doc></class>
	<class path="Class" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="haxe.remoting.SocketConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="126" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></results>
	<queue><c path="haxe.TimerQueue"/></queue>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="48"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="54"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="63"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="67"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="71"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<e path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="75"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="79"><f a=""><e path="Void"/></f></close>
		<processMessage public="1" set="method" line="83"><f a="data">
	<c path="String"/>
	<e path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="117"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<e path="Void"/>
</f></defaultLog>
		<new set="method" line="43"><f a="data:path">
	<a>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></results>
		<queue><c path="haxe.TimerQueue"/></queue>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.TextFormat" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/TextFormat.hx" extern="1">
		<font public="1"><c path="String"/></font>
		<size public="1"><c path="Float"/></size>
		<color public="1"><c path="Int"/></color>
		<url public="1"><c path="String"/></url>
		<target public="1"><c path="String"/></target>
		<bold public="1"><e path="Bool"/></bold>
		<italic public="1"><e path="Bool"/></italic>
		<underline public="1"><e path="Bool"/></underline>
		<align public="1"><c path="String"/></align>
		<leftMargin public="1"><c path="Float"/></leftMargin>
		<rightMargin public="1"><c path="Float"/></rightMargin>
		<indent public="1"><c path="Float"/></indent>
		<leading public="1"><c path="Float"/></leading>
		<blockIndent public="1"><c path="Float"/></blockIndent>
		<tabStops public="1"><c path="Array"><c path="Int"/></c></tabStops>
		<bullet public="1"><e path="Bool"/></bullet>
		<getTextExtent public="1" set="method"><f a="text:?width">
	<c path="String"/>
	<c path="Float"/>
	<d/>
</f></getTextExtent>
		<kerning public="1"><e path="Bool"/></kerning>
		<letterSpacing public="1"><c path="Float"/></letterSpacing>
		<display public="1"><c path="String"/></display>
		<new public="1" set="method"><f a="?font:?size:?textColor:?bold:?italic:?underline:?url:?window:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Resource" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a>
	<str><c path="String"/></str>
	<name><c path="String"/></name>
	<data><c path="String"/></data>
</a></c></content>
		<listNames public="1" set="method" line="70" static="1"><f a=""><c path="Array"><c path="String"/></c></f></listNames>
		<getString public="1" set="method" line="77" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getString>
		<getBytes public="1" set="method" line="91" static="1"><f a="name">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
	</class>
	<class path="flash.Lib" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Lib.hx">
		<_global public="1" static="1"><d/></_global>
		<_root public="1" static="1"><c path="flash.MovieClip"/></_root>
		<current public="1" static="1"><c path="flash.MovieClip"/></current>
		<onerror static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></onerror>
		<trace public="1" set="method" line="34" static="1"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></trace>
		<eval public="1" set="method" line="38" static="1"><f a="str">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="42" static="1"><f a="url:?target">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="46" static="1"><f a="cmd:?param">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></fscommand>
		<print public="1" set="method" line="50" static="1"><f a="cmd:?kind">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></print>
		<getTimer public="1" get="inline" set="null" line="55" static="1"><f a=""><c path="Int"/></f></getTimer>
		<getVersion public="1" set="method" line="59" static="1"><f a=""><c path="String"/></f></getVersion>
		<registerClass public="1" set="method" line="63" static="1"><f a="name:cl">
	<c path="String"/>
	<a/>
	<e path="Void"/>
</f></registerClass>
		<keys public="1" set="method" line="67" static="1"><f a="v">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<setErrorHandler public="1" set="method" line="71" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="haxe.BaseCode" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><c path="Int"/></nbits>
		<tbl><c path="Array"><c path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><e path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.LocalConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/LocalConnection.hx" extern="1">
		<connect public="1" set="method"><f a="connectionName">
	<c path="String"/>
	<e path="Bool"/>
</f></connect>
		<send public="1" set="method"><f a="connectionName:methodName:?p1:?p2:?p3:?p4:?p5:?p6">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Bool"/>
</f></send>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<domain public="1" set="method"><f a=""><c path="String"/></f></domain>
		<allowDomain public="1" set="dynamic"><f a="domain">
	<c path="String"/>
	<e path="Bool"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="dynamic"><f a="domain">
	<c path="String"/>
	<e path="Bool"/>
</f></allowInsecureDomain>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="haxe.io.Input" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/Input.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="242"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><c path="Int"/></pos>
		<len><c path="Int"/></len>
		<readByte public="1" set="method" line="56" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="75" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="35"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int32" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Int32.hx">
		<make public="1" get="inline" set="null" line="33" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="41" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<toInt public="1" get="inline" set="null" line="49" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<toNativeInt public="1" get="inline" set="null" line="62" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
		<add public="1" get="inline" set="null" line="70" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" get="inline" set="null" line="78" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" get="inline" set="null" line="86" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" get="inline" set="null" line="94" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" get="inline" set="null" line="102" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="110" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="118" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="126" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="134" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" get="inline" set="null" line="142" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" get="inline" set="null" line="150" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="158" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<complement public="1" get="inline" set="null" line="166" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" get="inline" set="null" line="174" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
	</class>
	<class path="haxe.remoting.Connection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" line="29" static="1"><c path="Int"/></TIMEOUT>
		<processRequest public="1" set="method" line="97" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="39"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="45"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="34"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" static="1"><e path="Bool"/></available>
		<marshallExceptions public="1" static="1"><e path="Bool"/></marshallExceptions>
		<addCallback public="1" set="method" static="1"><f a="methodName:instance:method">
	<c path="String"/>
	<d/>
	<d/>
	<e path="Bool"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="methodName:?p1:?p2:?p3:?p4:?p5:?p6:?p7:?p8:?p9">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.ContextMenu" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/ContextMenu.hx" extern="1">
		<hideBuiltInItems public="1" set="method"><f a=""><e path="Void"/></f></hideBuiltInItems>
		<copy public="1" set="method"><f a=""><c path="flash.ContextMenu"/></f></copy>
		<customItems public="1"><c path="Array"><c path="flash.ContextMenuItem"/></c></customItems>
		<builtInItems public="1"><d/></builtInItems>
		<onSelect public="1" set="dynamic"><f a="v:c">
	<d/>
	<c path="flash.ContextMenu"/>
	<e path="Void"/>
</f></onSelect>
		<new public="1" set="method"><f a="?callb">
	<f a=":">
		<d/>
		<c path="flash.ContextMenu"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="36"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.
</haxe_doc>
	</class>
	<class path="flash.Stage" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Stage.hx" extern="1">
		<width public="1" static="1"><c path="Float"/></width>
		<height public="1" static="1"><c path="Float"/></height>
		<scaleMode public="1" static="1"><c path="String"/></scaleMode>
		<align public="1" static="1"><c path="String"/></align>
		<showMenu public="1" static="1"><e path="Bool"/></showMenu>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></removeListener>
		<displayState public="1" static="1">
			<c path="String"/>
			<haxe_doc>
		Set to "fullScreen" in order to set Flash to fullscreen
		(can only be done in Mouse/Keyboard event listener).
		Don't forget allowfullscreen="true" in your SWF parameters.
	</haxe_doc>
		</displayState>
		<fullScreenSourceRect public="1" static="1"><c path="flash.geom.Rectangle"><c path="Int"/></c></fullScreenSourceRect>
		<onFullScreen public="1" set="dynamic" static="1"><f a="full">
	<e path="Bool"/>
	<e path="Void"/>
</f></onFullScreen>
	</class>
	<enum path="haxe.StackItem" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Stack.hx" module="haxe.Stack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><c path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<c path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>
	Elements return by [Stack] methods.
</haxe_doc>
	</enum>
	<class path="haxe.Stack" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Stack.hx">
		<callStack public="1" set="method" line="46" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the call stack elements.
	</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="69" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		catched.
	</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="100" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of the stack as a printable string.
	</haxe_doc>
		</toString>
		<itemToString set="method" line="109" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<e path="Void"/>
</f></itemToString>
		<makeStack set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>
	Get informations about the call stack.
</haxe_doc>
	</class>
	<class path="flash.net.FileReferenceList" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/net/FileReferenceList.hx" extern="1">
		<fileList public="1"><c path="Array"><d/></c></fileList>
		<browse public="1" set="method"><f a="?typeList">
	<c path="Array"><d/></c>
	<e path="Bool"/>
</f></browse>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="ValueType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="46" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="50" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="55" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="62" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="67" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="76" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="84" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="91" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="98" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="110" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="116" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="131" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="139" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="143" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="172" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="186" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="190" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="194" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><e path="Bool"/></success>
		<add public="1" set="method" line="37"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<e path="Void"/>
</f></add>
		<toString public="1" set="method" line="43"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.rtti.Generic" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/Generic.hx" interface="1"><haxe_doc>
	You can implement this interface with a parametrized type. For each type
	parameter used, a duplicate class with be created. This is useful on
	platforms that supports runtime typing (such as flash9).
</haxe_doc></class>
	<class path="haxe.unit.TestRunner" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/unit/TestRunner.hx">
		<tf line="35" static="1"><c path="flash.TextField"/></tf>
		<print public="1" set="dynamic" line="38" static="1"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<customTrace set="method" line="79" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></customTrace>
		<result><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="88"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></add>
		<run public="1" set="method" line="92"><f a=""><e path="Bool"/></f></run>
		<runCase set="method" line="101"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></runCase>
		<new public="1" set="method" line="83"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono/>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><e path="Bool"/></isPublic>
	<expr><t path="Null"><e path="haxe.macro.TypedExpr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<index><c path="Int"/></index>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<contructs><c path="Hash"><t path="haxe.macro.EnumField"/></c></contructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></remove>
	<get set="method"><f a=""><c path="Array"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></f></get>
	<add set="method"><f a="name:params:pos">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<e path="haxe.macro.Position"/>
	<e path="Void"/>
</f></add>
</a></typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccResolve/>
		<AccRequire a="r"><c path="String"/></AccRequire>
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccInline/>
		<AccCall a="m"><c path="String"/></AccCall>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethMacro/>
		<MethInline/>
		<MethDynamic/>
	</enum>
	<enum path="haxe.macro.TypedExpr" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Type.hx" module="haxe.macro.Type"/>
	<class path="flash.filters.ConvolutionFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/ConvolutionFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><c path="Float"/></color>
		<clamp public="1"><e path="Bool"/></clamp>
		<preserveAlpha public="1"><e path="Bool"/></preserveAlpha>
		<bias public="1"><c path="Float"/></bias>
		<divisor public="1"><c path="Float"/></divisor>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<matrixX public="1"><c path="Float"/></matrixX>
		<matrixY public="1"><c path="Float"/></matrixY>
		<clone public="1" set="method"><f a=""><c path="flash.filters.ConvolutionFilter"/></f></clone>
		<new public="1" set="method"><f a="?matrixX:?matrixY:?matrix:?divisor:?bias:?preserveAlpha:?clamp:?color:?alpha">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/Output.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<writeByte public="1" set="method" line="44" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="52" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="126"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.Md5" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Md5.hx">
		<encode public="1" set="method" line="32" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<inst line="55" static="1"><c path="haxe.Md5"/></inst>
		<bitOR set="method" line="60"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="66"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="72"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitAND>
		<addme set="method" line="78"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></addme>
		<rhex set="method" line="84"><f a="num">
	<c path="Int"/>
	<c path="String"/>
</f></rhex>
		<str2blks set="method" line="94"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
</f></str2blks>
		<rol set="method" line="114"><f a="num:cnt">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></rol>
		<cmn set="method" line="118"><f a="q:a:b:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></cmn>
		<ff set="method" line="122"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ff>
		<gg set="method" line="126"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></gg>
		<hh set="method" line="130"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></hh>
		<ii set="method" line="134"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ii>
		<doEncode set="method" line="138"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></doEncode>
		<new set="method" line="57"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Creates a MD5 of a String.
</haxe_doc>
	</class>
	<class path="haxe.SHA1" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/SHA1.hx">
		<hex_chr line="30" static="1"><c path="String"/></hex_chr>
		<newInt32 get="inline" set="null" line="32" static="1"><f a="left:right">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></newInt32>
		<encode public="1" set="method" line="38" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<hex set="method" line="81" static="1"><f a="num">
	<c path="haxe.Int32"/>
	<c path="String"/>
</f></hex>
		<str2blks_SHA1 set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="haxe.Int32"/></c>
			</f>
			<haxe_doc>
		Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.
	 </haxe_doc>
		</str2blks_SHA1>
		<add set="method" line="116" static="1">
			<f a="x:y">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Add integers, wrapping at 2^32.
	 </haxe_doc>
		</add>
		<rol set="method" line="125" static="1">
			<f a="num:cnt">
				<c path="haxe.Int32"/>
				<c path="Int"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Bitwise rotate a 32-bit number to the left
	 </haxe_doc>
		</rol>
		<ft set="method" line="132" static="1">
			<f a="t:b:c:d">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Perform the appropriate triplet combination function for the current iteration
	</haxe_doc>
		</ft>
		<kt set="method" line="142" static="1">
			<f a="t">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Determine the appropriate additive constant for the current iteration
	</haxe_doc>
		</kt>
	</class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/ColorMatrixFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<matrix public="1"><c path="Array"><c path="Float"/></c></matrix>
		<clone public="1" set="method"><f a=""><c path="flash.filters.ColorMatrixFilter"/></f></clone>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Reflect" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="40" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="44" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="57" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="61" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="65" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
		Does not work on Neko platform.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="69" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="74" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="80" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="87" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="73" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<e path="Void"/>
</f></process>
		<create public="1" set="method" line="89" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="getConnection" set="setConnection"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="48"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="52"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<getConnection set="method" line="58"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></getConnection>
		<setConnection set="method" line="62"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></setConnection>
		<call public="1" set="method" line="68"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="43"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<quality public="1"><c path="Float"/></quality>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<clone public="1" set="method"><f a=""><c path="flash.filters.BlurFilter"/></f></clone>
		<new public="1" set="method"><f a="?blurX:?blurY:?quality">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.ContextMenuItem" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/ContextMenuItem.hx" extern="1">
		<copy public="1" set="method"><f a=""><c path="flash.ContextMenuItem"/></f></copy>
		<onSelect public="1" set="dynamic"><f a="v:c">
	<d/>
	<c path="flash.ContextMenuItem"/>
	<e path="Void"/>
</f></onSelect>
		<enabled public="1"><e path="Bool"/></enabled>
		<visible public="1"><e path="Bool"/></visible>
		<caption public="1"><c path="String"/></caption>
		<separatorBefore public="1"><e path="Bool"/></separatorBefore>
		<new public="1" set="method"><f a="caption:callb:?separatorBefore:?enabled:?visible">
	<c path="String"/>
	<f a=":">
		<d/>
		<c path="flash.ContextMenuItem"/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.PrintJob" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/PrintJob.hx" extern="1">
		<start public="1" set="method"><f a=""><e path="Bool"/></f></start>
		<addPage public="1" set="method"><f a="target:?printArea:?options:?frameNum">
	<d/>
	<d/>
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
</f></addPage>
		<send public="1" set="method"><f a=""><e path="Void"/></f></send>
		<paperWidth public="1" set="null"><c path="Float"/></paperWidth>
		<paperHeight public="1" set="null"><c path="Float"/></paperHeight>
		<pageWidth public="1" set="null"><c path="Float"/></pageWidth>
		<pageHeight public="1" set="null"><c path="Float"/></pageHeight>
		<orientation public="1" set="null"><c path="String"/></orientation>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="116" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="134" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="148" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="163" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="212" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="232" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.Public" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Public.hx" interface="1"><haxe_doc>
	When implementing this interface, all default fields access for the class and
	subclasses becomes [public] instead of [private].
</haxe_doc></class>
	<class path="haxe.unit.TestCase" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/unit/TestCase.hx">
		<implements path="haxe.Public"/>
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="34"><f a=""><e path="Void"/></f></setup>
		<tearDown public="1" set="method" line="37"><f a=""><e path="Void"/></f></tearDown>
		<print public="1" set="method" line="40"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="44"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="54"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="64"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Date" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>
		Creates an [Array] from an [Iterable]
	</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>
		Creates a [List] from an [Iterable]
	</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>
		Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.
	</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>
		Similar to [map], but also pass an index for each item iterated.
	</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.
	</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if at least one element of the iterable is found by using the specific function.
	</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if all elements of the iterable have the specified property defined by [f].
	</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Call the function 'f' on all elements of the [Iterable] 'it'.
	</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>
		Return the list of elements matching the function 'f'
	</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>
		Functional 'fold' using an [Iterable]
	</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Count the number of elements in an [Iterable] having [pred] returning true.
	</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an iterable does not contain any element.
	</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.
	</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>
		Returns a list containing all items of 'a' followed by all items of 'b'
	</haxe_doc>
		</concat>
		<haxe_doc>
	The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.
</haxe_doc>
	</class>
	<class path="flash.display.BitmapData" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/display/BitmapData.hx" extern="1">
		<loadBitmap public="1" set="method" static="1"><f a="id">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
</f></loadBitmap>
		<width public="1"><c path="Int"/></width>
		<height public="1"><c path="Int"/></height>
		<rectangle public="1"><c path="flash.geom.Rectangle"><c path="Int"/></c></rectangle>
		<transparent public="1"><e path="Bool"/></transparent>
		<getPixel public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel>
		<setPixel public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel32>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel32>
		<fillRect public="1" set="method"><f a="r:color">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></fillRect>
		<copyPixels public="1" set="method"><f a="src:srcRect:dst:?alpha:?alphaPos:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyPixels>
		<applyFilter public="1" set="method"><f a="source:sourceRect:dest:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<c path="Int"/>
</f></applyFilter>
		<scroll public="1" set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<threshold public="1" set="method"><f a="src:srcRect:dstPoint:op:threshold:?color:?mask:?copy">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></threshold>
		<draw public="1" set="method"><f a="source:?matrix:?colortrans:?blendMode:?clipRect:?smooth">
	<d/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<d/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<pixelDissolve public="1" set="method"><f a="src:srcRect:dst:?seed:?npixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></pixelDissolve>
		<floodFill public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></floodFill>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?fillColor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
</f></getColorBoundsRect>
		<perlinNoise public="1" set="method"><f a="x:y:num:seed:stitch:noise:?channels:?gray:?offsets">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"><c path="Float"/></c></c>
	<e path="Void"/>
</f></perlinNoise>
		<colorTransform public="1" set="method"><f a="r:trans">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></colorTransform>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlpha:object:?secondPoint:?secondAlpha">
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<d/>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Bool"/>
</f></hitTest>
		<paletteMap public="1" set="method"><f a="source:srcRect:dst:?reds:?greens:?blues:?alphas">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></paletteMap>
		<merge public="1" set="method"><f a="src:srcRect:dst:redMult:greenMult:blueMult:alphaMult">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="seed:?low:?high:?channels:?gray">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></noise>
		<copyChannel public="1" set="method"><f a="source:sourceRect:dest:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></copyChannel>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
</f></generateFilterRect>
		<compare public="1" set="method">
			<f a="b">
				<c path="flash.display.BitmapData"/>
				<c path="flash.display.BitmapData"/>
			</f>
			<haxe_doc> FP9 only </haxe_doc>
		</compare>
		<new public="1" set="method"><f a="width:height:?transparent:?fillcolor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="29" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="27"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.Accessibility" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Accessibility.hx" extern="1">
		<isActive public="1" set="method" static="1"><f a=""><e path="Bool"/></f></isActive>
		<updateProperties public="1" set="method" static="1"><f a=""><e path="Void"/></f></updateProperties>
		<sendEvent public="1" set="method" static="1"><f a="mc:childID:event:isNonHtml">
	<c path="flash.MovieClip"/>
	<d/>
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></sendEvent>
	</class>
	<class path="flash.geom.Point" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/geom/Point.hx" extern="1">
		<distance public="1" params="T" set="method" static="1"><f a="p1:p2">
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="distance.T"/>
</f></distance>
		<interpolate public="1" params="T" set="method" static="1"><f a="p1:p2:f">
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="interpolate.T"/>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
</f></interpolate>
		<polar public="1" params="T" set="method" static="1"><f a="dist:angle">
	<c path="polar.T"/>
	<c path="polar.T"/>
	<c path="flash.geom.Point"><c path="polar.T"/></c>
</f></polar>
		<x public="1"><c path="flash.geom.Point.T"/></x>
		<y public="1"><c path="flash.geom.Point.T"/></y>
		<length public="1"><c path="Float"/></length>
		<normalize public="1" set="method"><f a="length">
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></normalize>
		<add public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></add>
		<subtract public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></subtract>
		<equals public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<e path="Bool"/>
</f></equals>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></offset>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="x:y">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<class path="flash.Button" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Button.hx" extern="1">
		<_alpha public="1"><c path="Float"/></_alpha>
		<enabled public="1"><e path="Bool"/></enabled>
		<_focusrect public="1"><e path="Bool"/></_focusrect>
		<_height public="1"><c path="Float"/></_height>
		<_highquality public="1"><c path="Int"/></_highquality>
		<menu public="1"><c path="flash.ContextMenu"/></menu>
		<_name public="1"><c path="String"/></_name>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<_quality public="1"><c path="String"/></_quality>
		<_rotation public="1"><c path="Float"/></_rotation>
		<_soundbuftime public="1"><c path="Float"/></_soundbuftime>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<_target public="1"><c path="String"/></_target>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<_url public="1"><c path="String"/></_url>
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<_visible public="1"><e path="Bool"/></_visible>
		<_width public="1"><c path="Float"/></_width>
		<_x public="1"><c path="Float"/></_x>
		<_xmouse public="1"><c path="Float"/></_xmouse>
		<_xscale public="1"><c path="Float"/></_xscale>
		<_y public="1"><c path="Float"/></_y>
		<_ymouse public="1"><c path="Float"/></_ymouse>
		<_yscale public="1"><c path="Float"/></_yscale>
		<onDragOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOut>
		<onDragOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOver>
		<onKeyDown public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyDown>
		<onKeyUp public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyUp>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<e path="Void"/>
</f></onKillFocus>
		<onPress public="1" set="dynamic"><f a=""><e path="Void"/></f></onPress>
		<onRelease public="1" set="dynamic"><f a=""><e path="Void"/></f></onRelease>
		<onReleaseOutside public="1" set="dynamic"><f a=""><e path="Void"/></f></onReleaseOutside>
		<onRollOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOut>
		<onRollOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOver>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<e path="Void"/>
</f></onSetFocus>
		<getDepth public="1" set="method"><f a=""><c path="Int"/></f></getDepth>
		<filters public="1"><c path="Array"><d/></c></filters>
		<blendMode public="1"><d/></blendMode>
		<cacheAsBitmap public="1"><e path="Bool"/></cacheAsBitmap>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"><c path="Float"/></c></scale9Grid>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="53"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="49"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[
	This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	[
	class MyXml extends haxe.xml.Proxy<"my.xml",MyStructure> {
	}
	...
	var h = new Hash<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// access to "myNode" is only possible
	// if you have an id="myNode" attribute
	// in your XML, and completion works as well
	]
]]></haxe_doc>
	</class>
	<class path="haxe.rtti.HtmlEditor" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/HtmlEditor.hx">
		<UID line="30" static="1"><c path="Int"/></UID>
		<id><c path="String"/></id>
		<types><c path="Hash"><e path="haxe.rtti.TypeTree"/></c></types>
		<buf><c path="StringBuf"/></buf>
		<nfields><c path="Int"/></nfields>
		<add public="1" set="method" line="41"><f a="tl">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></add>
		<buildHTML public="1" set="method" line="55"><f a="id:v:t">
	<c path="String"/>
	<d/>
	<e path="haxe.rtti.CType"/>
	<c path="String"/>
</f></buildHTML>
		<open set="method" line="65"><f a="t">
	<c path="String"/>
	<e path="Void"/>
</f></open>
		<close set="method" line="69"><f a="?t">
	<c path="String"/>
	<e path="Void"/>
</f></close>
		<genUID set="method" line="73"><f a=""><c path="String"/></f></genUID>
		<genFieldName set="method" line="77"><f a=""><c path="String"/></f></genFieldName>
		<skipField set="method" line="81"><f a=""><e path="Void"/></f></skipField>
		<attrib set="method" line="85"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></attrib>
		<followTypeDef set="method" line="89"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<e path="haxe.rtti.CType"/>
</f></followTypeDef>
		<getEnum set="method" line="99"><f a="name">
	<c path="String"/>
	<t path="haxe.rtti.Enumdef"/>
</f></getEnum>
		<buildNullField set="method" line="105"><f a="checked">
	<e path="Bool"/>
	<e path="Void"/>
</f></buildNullField>
		<buildHTMLRec set="method" line="115"><f a="v:t:nullable">
	<d/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></buildHTMLRec>
		<buildObject public="1" set="method" line="232"><f a="id:params:t">
	<c path="String"/>
	<c path="Hash"><c path="String"/></c>
	<e path="haxe.rtti.CType"/>
	<d/>
</f></buildObject>
		<buildObjectRec set="method" line="238"><f a="params:t:nullable">
	<c path="Hash"><c path="String"/></c>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<d/>
</f></buildObjectRec>
		<skipObjectRec set="method" line="307"><f a="t:nullable">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></skipObjectRec>
		<new public="1" set="method" line="37"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="36"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.
</haxe_doc>
	</class>
	<class path="flash.Microphone" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Microphone.hx" extern="1">
		<names public="1" set="null" static="1"><c path="Array"><c path="String"/></c></names>
		<get public="1" set="method" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.Microphone"/>
</f></get>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<gain public="1" set="null"><c path="Float"/></gain>
		<index public="1" set="null"><c path="Int"/></index>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<silenceLevel public="1" set="null"><c path="Int"/></silenceLevel>
		<silenceTimeOut public="1" set="null"><c path="Float"/></silenceTimeOut>
		<rate public="1" set="null"><c path="Float"/></rate>
		<useEchoSuppression public="1" set="null"><e path="Bool"/></useEchoSuppression>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeOut">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setSilenceLevel>
		<setRate public="1" set="method"><f a="rate">
	<c path="Float"/>
	<e path="Void"/>
</f></setRate>
		<setGain public="1" set="method"><f a="gain">
	<c path="Float"/>
	<e path="Void"/>
</f></setGain>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<e path="Bool"/>
	<e path="Void"/>
</f></setUseEchoSuppression>
		<onActivity public="1" set="dynamic"><f a="active">
	<e path="Bool"/>
	<e path="Void"/>
</f></onActivity>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
	</class>
	<class path="flash.filters.BevelFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/BevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<type public="1"><c path="String"/></type>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<knockout public="1"><e path="Bool"/></knockout>
		<strength public="1"><c path="Float"/></strength>
		<quality public="1"><c path="Float"/></quality>
		<shadowAlpha public="1"><c path="Float"/></shadowAlpha>
		<shadowColor public="1"><c path="Float"/></shadowColor>
		<highlightAlpha public="1"><c path="Float"/></highlightAlpha>
		<highlightColor public="1"><c path="Float"/></highlightColor>
		<angle public="1"><c path="Float"/></angle>
		<distance public="1"><c path="Float"/></distance>
		<clone public="1" set="method"><f a=""><c path="flash.filters.BevelFilter"/></f></clone>
		<new public="1" set="method"><f a="?distance:?angle:?highlightColor:?highlightAlpha:?shadowColor:?shadowAlpha:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileReference" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/net/FileReference.hx" extern="1">
		<creator public="1"><c path="String"/></creator>
		<creationDate public="1"><c path="Date"/></creationDate>
		<modificationDate public="1"><c path="Date"/></modificationDate>
		<size public="1"><c path="Float"/></size>
		<type public="1"><c path="String"/></type>
		<name public="1"><c path="String"/></name>
		<postData public="1"><c path="String"/></postData>
		<browse public="1" set="method"><f a="?typeList">
	<c path="Array"><d/></c>
	<e path="Bool"/>
</f></browse>
		<upload public="1" set="method"><f a="url">
	<c path="String"/>
	<e path="Bool"/>
</f></upload>
		<download public="1" set="method"><f a="url:?defaultName">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></download>
		<cancel public="1" set="method"><f a=""><e path="Void"/></f></cancel>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash._MovieClip.MCBounds" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/MovieClip.hx" private="1" module="flash.MovieClip" extern="1">
		<xMin public="1"><c path="Float"/></xMin>
		<xMax public="1"><c path="Float"/></xMax>
		<yMin public="1"><c path="Float"/></yMin>
		<yMax public="1"><c path="Float"/></yMax>
	</class>
	<class path="flash.MovieClip" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/MovieClip.hx" extern="1">
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<enabled public="1"><e path="Bool"/></enabled>
		<focusEnabled public="1"><e path="Bool"/></focusEnabled>
		<tabChildren public="1"><e path="Bool"/></tabChildren>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<hitArea public="1"><c path="flash.MovieClip"/></hitArea>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<_x public="1"><c path="Float"/></_x>
		<_y public="1"><c path="Float"/></_y>
		<_xmouse public="1"><c path="Float"/></_xmouse>
		<_ymouse public="1"><c path="Float"/></_ymouse>
		<_xscale public="1"><c path="Float"/></_xscale>
		<_yscale public="1"><c path="Float"/></_yscale>
		<_width public="1"><c path="Float"/></_width>
		<_height public="1"><c path="Float"/></_height>
		<_alpha public="1"><c path="Float"/></_alpha>
		<_lockroot public="1"><e path="Bool"/></_lockroot>
		<_visible public="1"><e path="Bool"/></_visible>
		<_target public="1"><c path="String"/></_target>
		<_rotation public="1"><c path="Float"/></_rotation>
		<_name public="1"><c path="String"/></_name>
		<_droptarget public="1" set="null"><c path="String"/></_droptarget>
		<_currentframe public="1" set="null"><c path="Int"/></_currentframe>
		<_totalframes public="1" set="null"><c path="Int"/></_totalframes>
		<_framesloaded public="1" set="null"><c path="Int"/></_framesloaded>
		<_quality public="1"><c path="String"/></_quality>
		<_focusrect public="1"><e path="Bool"/></_focusrect>
		<_soundbuftime public="1"><c path="Float"/></_soundbuftime>
		<_url public="1"><c path="String"/></_url>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<getURL public="1" set="method"><f a="url:?window:?method">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<unloadMovie public="1" set="method"><f a=""><e path="Void"/></f></unloadMovie>
		<loadVariables public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></loadVariables>
		<loadMovie public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></loadMovie>
		<attachMovie public="1" set="method"><f a="id:name:depth:?initObject">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></attachMovie>
		<swapDepths public="1" set="method"><f a="mc">
	<d/>
	<e path="Void"/>
</f></swapDepths>
		<localToGlobal public="1" set="method"><f a="pt">
	<a>
		<y><c path="Float"/></y>
		<x><c path="Float"/></x>
	</a>
	<e path="Void"/>
</f></localToGlobal>
		<globalToLocal public="1" set="method"><f a="pt">
	<a>
		<y><c path="Float"/></y>
		<x><c path="Float"/></x>
	</a>
	<e path="Void"/>
</f></globalToLocal>
		<hitTest public="1" set="method"><f a="x_or_mc:?y:?shape">
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></hitTest>
		<getBounds public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getBounds>
		<getBytesLoaded public="1" set="method"><f a=""><c path="Int"/></f></getBytesLoaded>
		<getBytesTotal public="1" set="method"><f a=""><c path="Int"/></f></getBytesTotal>
		<attachAudio public="1" set="method"><f a="id">
	<d/>
	<e path="Void"/>
</f></attachAudio>
		<attachVideo public="1" set="method"><f a="id">
	<d/>
	<e path="Void"/>
</f></attachVideo>
		<getDepth public="1" set="method"><f a=""><c path="Int"/></f></getDepth>
		<setMask public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></setMask>
		<play public="1" set="method"><f a=""><e path="Void"/></f></play>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<nextFrame public="1" set="method"><f a=""><e path="Void"/></f></nextFrame>
		<prevFrame public="1" set="method"><f a=""><e path="Void"/></f></prevFrame>
		<gotoAndPlay public="1" set="method"><f a="frame">
	<d/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame">
	<d/>
	<e path="Void"/>
</f></gotoAndStop>
		<duplicateMovieClip public="1" set="method"><f a="name:depth:?initObject">
	<c path="String"/>
	<c path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></duplicateMovieClip>
		<removeMovieClip public="1" set="method"><f a=""><e path="Void"/></f></removeMovieClip>
		<startDrag public="1" set="method"><f a="lockCenter:?left:?top:?right:?bottom">
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></startDrag>
		<stopDrag public="1" set="method"><f a=""><e path="Void"/></f></stopDrag>
		<createEmptyMovieClip public="1" set="method"><f a="name:depth">
	<c path="String"/>
	<c path="Int"/>
	<c path="flash.MovieClip"/>
</f></createEmptyMovieClip>
		<beginFill public="1" set="method"><f a="rgb:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<getInstanceAtDepth public="1" set="method"><f a="depth">
	<c path="Int"/>
	<c path="flash.MovieClip"/>
</f></getInstanceAtDepth>
		<getNextHighestDepth public="1" set="method"><f a=""><c path="Int"/></f></getNextHighestDepth>
		<beginGradientFill public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<lineStyle public="1" set="method"><f a="?thickness:?rgb:?alpha:?pixelHinting:?noScale:?capsStyle:?jointStyle:?miterLimit">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<endFill public="1" set="method"><f a=""><e path="Void"/></f></endFill>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<createTextField public="1" set="method"><f a="instanceName:depth:x:y:width:height">
	<c path="String"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.TextField"/>
</f></createTextField>
		<getTextSnapshot public="1" set="method"><f a=""><c path="flash.TextSnapshot"/></f></getTextSnapshot>
		<getSWFVersion public="1" set="method"><f a=""><c path="Int"/></f></getSWFVersion>
		<onData public="1" set="dynamic"><f a=""><e path="Void"/></f></onData>
		<onDragOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOut>
		<onDragOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOver>
		<onEnterFrame public="1" set="dynamic"><f a=""><e path="Void"/></f></onEnterFrame>
		<onKeyDown public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyDown>
		<onKeyUp public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyUp>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<e path="Void"/>
</f></onKillFocus>
		<onLoad public="1" set="dynamic"><f a=""><e path="Void"/></f></onLoad>
		<onMouseDown public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseDown>
		<onMouseMove public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseMove>
		<onMouseUp public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseUp>
		<onPress public="1" set="dynamic"><f a=""><e path="Void"/></f></onPress>
		<onRelease public="1" set="dynamic"><f a=""><e path="Void"/></f></onRelease>
		<onReleaseOutside public="1" set="dynamic"><f a=""><e path="Void"/></f></onReleaseOutside>
		<onRollOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOut>
		<onRollOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOver>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<e path="Void"/>
</f></onSetFocus>
		<onUnload public="1" set="dynamic"><f a=""><e path="Void"/></f></onUnload>
		<filters public="1"><c path="Array"><d/></c></filters>
		<blendMode public="1"><d/></blendMode>
		<cacheAsBitmap public="1"><e path="Bool"/></cacheAsBitmap>
		<opaqueBackground public="1"><c path="Int"/></opaqueBackground>
		<scrollRect public="1"><d/></scrollRect>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"><c path="Float"/></c></scale9Grid>
		<getRect public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getRect>
		<attachBitmap public="1" set="method"><f a="bmp:depth:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></attachBitmap>
		<beginBitmapFill public="1" set="method"><f a="bmp:?matrix:?repeat:?smoothing">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<lineGradientStyle public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<forceSmoothing public="1">
			<e path="Bool"/>
			<haxe_doc> FP9 only </haxe_doc>
		</forceSmoothing>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="StringBuf" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="57">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="73">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="String"/></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
		<setColor public="1" set="dynamic" line="52" static="1"><f a="rgb">
	<c path="Int"/>
	<e path="Void"/>
</f></setColor>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="79" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="50"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="54"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="58"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="62"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="66"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="38"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/unit/TestStatus.hx">
		<done public="1"><e path="Bool"/></done>
		<success public="1"><e path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.filters.GradientBevelFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/GradientBevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<type public="1"><c path="String"/></type>
		<knockout public="1"><e path="Bool"/></knockout>
		<strength public="1"><c path="Float"/></strength>
		<quality public="1"><c path="Float"/></quality>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<colors public="1"><c path="Array"><d/></c></colors>
		<angle public="1"><c path="Float"/></angle>
		<distance public="1"><c path="Float"/></distance>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GradientBevelFilter"/></f></clone>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.XMLRequest" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/XMLRequest.hx">
		<send public="1" set="method" line="5" static="1"><f a="url:xml:?target:?post:?content">
	<c path="String"/>
	<c path="Xml"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></send>
		<load public="1" set="method" line="11" static="1"><f a="url:xml:onData:?post:?content">
	<c path="String"/>
	<c path="Xml"/>
	<f a="">
		<t path="Null"><c path="String"/></t>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></load>
	</class>
	<class path="haxe.Serializer" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="34" static="1">
			<e path="Bool"/>
			<haxe_doc>
		If the values you are serializing can contain
		circular references or objects repetitions, you should
		set USE_CACHE to true to prevent infinite loops.
	</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="40" static="1">
			<e path="Bool"/>
			<haxe_doc>
		Use constructor indexes for enums instead of names.
		This is less reliable but more compact.
	</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="42" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="409" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Serialize a single value and return the string.
	</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="Hash"><c path="Int"/></c></shash>
		<scount><c path="Int"/></scount>
		<useCache public="1"><e path="Bool"/></useCache>
		<useEnumIndex public="1"><e path="Bool"/></useEnumIndex>
		<toString public="1" set="method" line="60"><f a=""><c path="String"/></f></toString>
		<serializeString set="method" line="94"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="113"><f a="v">
	<unknown/>
	<e path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="150"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="158"><f a="v">
	<d/>
	<e path="Void"/>
</f></serialize>
		<serializeException public="1" set="method" line="390"><f a="e">
	<d/>
	<e path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="51"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID line="29" static="1"><c path="Int"/></ID>
		<remotingCall set="method" line="80" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="95" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></remotingResult>
		<connect public="1" set="method" line="112" static="1"><f a="name:?ctx:?allowDomains">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.LocalConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="IntHash"><a>
	<result><f a="">
	<d/>
	<e path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><c path="flash.LocalConnection"/></cnx>
</a></__data>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="57"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="61"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<close public="1" set="method" line="76"><f a=""><e path="Void"/></f></close>
		<new set="method" line="46"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="IntHash"><a>
	<result><f a="">
	<d/>
	<e path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><c path="flash.LocalConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/BytesData.hx"><c path="Array"><c path="Int"/></c></typedef>
	<typedef path="haxe.PosInfos" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<enum path="haxe._Template.TemplateExpr" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><e path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><e path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="EReg" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/EReg.hx">
		<match public="1" set="method" line="45">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="54">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="62">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="70">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="78">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="86">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="95">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="104">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="37">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new regular expression with pattern [r] and
		options [opt].
	</haxe_doc>
		</new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="haxe.Template" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Template.hx">
		<splitter line="50" static="1"><c path="EReg"/></splitter>
		<expr_splitter line="51" static="1"><c path="EReg"/></expr_splitter>
		<expr_trim line="52" static="1"><c path="EReg"/></expr_trim>
		<expr_int line="53" static="1"><c path="EReg"/></expr_int>
		<expr_float line="54" static="1"><c path="EReg"/></expr_float>
		<globals public="1" line="56" static="1"><d/></globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="71"><f a="context:?macros">
	<d/>
	<d/>
	<c path="String"/>
</f></execute>
		<resolve set="method" line="80"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="91"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="127"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="142"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="192"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="223"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="242"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="256"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="260"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="306"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<e path="Void"/>
</f></run>
		<new public="1" set="method" line="64"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<transformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="Float"/></c>
	<c path="flash.geom.Point"><c path="Float"/></c>
</f></transformPoint>
		<deltaTransformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="Float"/></c>
	<c path="flash.geom.Point"><c path="Float"/></c>
</f></deltaTransformPoint>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<scale public="1" set="method"><f a="sx:sy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<translate public="1" set="method"><f a="tx:ty">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<rotate public="1" set="method"><f a="r">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><e path="Void"/></f></invert>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<createGradientBox public="1" set="method"><f a="width:height:?rot:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method"><f a="scalex:scaley:?rot:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.SharedObject" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/SharedObject.hx" extern="1">
		<getLocal public="1" set="method" static="1"><f a="name:?localPath:?secure">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="flash.SharedObject"/>
</f></getLocal>
		<getRemote public="1" set="method" static="1"><f a="name:remotePath:?persistence">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<c path="flash.SharedObject"/>
</f></getRemote>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<c path="Int"/>
</f></getDiskUsage>
		<getMaxSize public="1" set="method" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</getMaxSize>
		<addListener public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</addListener>
		<removeListener public="1" set="method" static="1">
			<f a="soName">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc> flash lite only </haxe_doc>
		</removeListener>
		<send public="1" set="method"><f a="handler:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<flush public="1" set="method"><f a="?minDiskSpace">
	<c path="Float"/>
	<d/>
</f></flush>
		<connect public="1" set="method"><f a="cnx">
	<c path="flash.NetConnection"/>
	<e path="Bool"/>
</f></connect>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<getSize public="1" set="method"><f a=""><c path="Float"/></f></getSize>
		<setFps public="1" set="method"><f a="updatesPerSecond">
	<c path="Float"/>
	<e path="Bool"/>
</f></setFps>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
		<onSync public="1" set="dynamic"><f a="objArray">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></onSync>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<data public="1"><d/></data>
	</class>
	<class path="flash.Camera" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Camera.hx" extern="1">
		<names public="1" set="null" static="1"><c path="Array"><c path="String"/></c></names>
		<get public="1" set="method" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.Camera"/>
</f></get>
		<bandwidth public="1" set="null"><c path="Int"/></bandwidth>
		<fps public="1" set="null"><c path="Float"/></fps>
		<currentFps public="1" set="null"><c path="Float"/></currentFps>
		<width public="1" set="null"><c path="Int"/></width>
		<height public="1" set="null"><c path="Int"/></height>
		<index public="1" set="null"><c path="Int"/></index>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<motionLevel public="1" set="null"><c path="Float"/></motionLevel>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<quality public="1" set="null"><c path="Int"/></quality>
		<keyFrameInterval public="1" set="null"><c path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><e path="Bool"/></loopback>
		<motionTimeOut public="1" set="null"><c path="Float"/></motionTimeOut>
		<setMode public="1" set="method"><f a="width:height:?fps:?favorArea">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setMode>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeOut">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:?quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method"><f a="compress">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopback>
		<onActivity public="1" set="dynamic"><f a="active">
	<e path="Bool"/>
	<e path="Void"/>
</f></onActivity>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
	</class>
	<class path="flash.Color" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Color.hx" extern="1">
		<setRGB public="1" set="method"><f a="color">
	<c path="Int"/>
	<e path="Void"/>
</f></setRGB>
		<getRGB public="1" set="method"><f a=""><c path="Int"/></f></getRGB>
		<setTransform public="1" set="method"><f a="transformObject">
	<d/>
	<e path="Void"/>
</f></setTransform>
		<getTransform public="1" set="method"><f a=""><a>
	<rb><c path="Float"/></rb>
	<ra><c path="Float"/></ra>
	<gb><c path="Float"/></gb>
	<ga><c path="Float"/></ga>
	<bb><c path="Float"/></bb>
	<ba><c path="Float"/></ba>
	<ab><c path="Float"/></ab>
	<aa><c path="Float"/></aa>
</a></f></getTransform>
		<new public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.StringInput" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="29"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FReg a="matcher"><c path="EReg"/></FReg>
		<FInt/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FBool/>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<e path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<e path="Bool"/>
		</RList>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CMatch/>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
	</enum>
	<class path="haxe.xml.Check" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Check.hx">
		<blanks line="62" static="1"><c path="EReg"/></blanks>
		<isBlank set="method" line="64" static="1"><f a="x">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="68" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<e path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="82" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<e path="Bool"/>
</f></isNullable>
		<check set="method" line="105" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="170" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="243" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="258" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="267" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="278" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="308" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="315" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="flash.SelectionListener" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Selection.hx" module="flash.Selection"><a><onSetFocus><f a=":">
	<c path="flash.TextField"/>
	<c path="flash.TextField"/>
	<e path="Void"/>
</f></onSetFocus></a></typedef>
	<class path="flash.Selection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Selection.hx" extern="1">
		<getBeginIndex public="1" set="method" static="1"><f a=""><c path="Int"/></f></getBeginIndex>
		<getEndIndex public="1" set="method" static="1"><f a=""><c path="Int"/></f></getEndIndex>
		<getCaretIndex public="1" set="method" static="1"><f a=""><c path="Int"/></f></getCaretIndex>
		<getFocus public="1" set="method" static="1"><f a=""><c path="String"/></f></getFocus>
		<setFocus public="1" set="method" static="1"><f a="newFocus">
	<d/>
	<e path="Bool"/>
</f></setFocus>
		<setSelection public="1" set="method" static="1"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<addListener public="1" set="method" static="1"><f a="listener">
	<t path="flash.SelectionListener"/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<t path="flash.SelectionListener"/>
	<e path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash.System" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/System.hx" extern="1">
		<useCodepage public="1" static="1"><e path="Bool"/></useCodepage>
		<exactSettings public="1" static="1"><e path="Bool"/></exactSettings>
		<showSettings public="1" set="method" static="1"><f a="?tabID">
	<c path="Float"/>
	<e path="Void"/>
</f></showSettings>
		<setClipboard public="1" set="method" static="1"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></setClipboard>
		<onStatus public="1" set="dynamic" static="1"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString set="method" line="55" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections line="96" static="1"><c path="Hash"><c path="haxe.remoting.ExternalConnection"/></c></connections>
		<doCall set="method" line="98" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<jsConnect public="1" set="method" line="124" static="1"><f a="name:?ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.ExternalConnection"/>
</f></jsConnect>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="40"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="46"><f a=""><e path="Void"/></f></close>
		<call public="1" set="method" line="64"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="35"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Synchronous communications between Flash and Javascript.
</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.SocketWrapper" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/SocketWrapper.hx">
		<ID line="33" static="1"><c path="Int"/></ID>
		<create set="method" line="35" static="1"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></create>
		<init set="method" line="76" static="1"><f a=""><e path="Void"/></f></init>
		<_ line="85" static="1"><e path="Void"/></_>
		<haxe_doc>
	See [js.XMLSocket]
</haxe_doc>
	</class>
	<class path="Math" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="flash.ExtendedKey" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/ExtendedKey.hx" extern="1">
		<SOFT1 public="1" static="1"><c path="String"/></SOFT1>
		<SOFT2 public="1" static="1"><c path="String"/></SOFT2>
		<SOFT3 public="1" static="1"><c path="String"/></SOFT3>
		<SOFT4 public="1" static="1"><c path="String"/></SOFT4>
		<SOFT5 public="1" static="1"><c path="String"/></SOFT5>
		<SOFT6 public="1" static="1"><c path="String"/></SOFT6>
		<SOFT7 public="1" static="1"><c path="String"/></SOFT7>
		<SOFT8 public="1" static="1"><c path="String"/></SOFT8>
		<SOFT9 public="1" static="1"><c path="String"/></SOFT9>
		<SOFT10 public="1" static="1"><c path="String"/></SOFT10>
		<SOFT11 public="1" static="1"><c path="String"/></SOFT11>
		<SOFT12 public="1" static="1"><c path="String"/></SOFT12>
		<haxe_doc> flash lite only </haxe_doc>
	</class>
	<class path="flash.NetConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/NetConnection.hx" extern="1">
		<isConnected public="1" set="null"><e path="Bool"/></isConnected>
		<uri public="1" set="null"><c path="String"/></uri>
		<connect public="1" set="method"><f a="targetURI:?p1:?p2:?p3:?p4">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Bool"/>
</f></connect>
		<call public="1" set="method"><f a="remoteMethod:resultObject:?p1:?p2:?p3:?p4:?p5:?p6">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></call>
		<addHeader public="1" set="method"><f a="header:mustUnderstand:object">
	<c path="String"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></addHeader>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onStatus>
		<onResult public="1" set="dynamic"><f a="infoObject">
	<d/>
	<e path="Void"/>
</f></onResult>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="Std" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="57" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="flash.filters.GradientGlowFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/GradientGlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<type public="1"><c path="String"/></type>
		<knockout public="1"><e path="Bool"/></knockout>
		<strength public="1"><c path="Float"/></strength>
		<quality public="1"><c path="Float"/></quality>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<ratios public="1"><c path="Array"><c path="Float"/></c></ratios>
		<alphas public="1"><c path="Array"><c path="Float"/></c></alphas>
		<colors public="1"><c path="Array"><c path="Float"/></c></colors>
		<angle public="1"><c path="Float"/></angle>
		<distance public="1"><c path="Float"/></distance>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GradientGlowFilter"/></f></clone>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Timer" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Timer.hx">
		<delay public="1" set="method" line="76" static="1"><f a="f:time_ms">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<measure public="1" params="T" set="method" line="87" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<stamp public="1" set="method" line="97" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns a timestamp, in seconds
	</haxe_doc>
		</stamp>
		<id><t path="Null"><c path="Int"/></t></id>
		<stop public="1" set="method" line="52"><f a=""><e path="Void"/></f></stop>
		<run public="1" set="dynamic" line="73"><f a=""><e path="Void"/></f></run>
		<new public="1" set="method" line="38"><f a="time_ms">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/geom/Rectangle.hx" extern="1">
		<left public="1"><c path="flash.geom.Rectangle.T"/></left>
		<top public="1"><c path="flash.geom.Rectangle.T"/></top>
		<right public="1"><c path="flash.geom.Rectangle.T"/></right>
		<bottom public="1"><c path="flash.geom.Rectangle.T"/></bottom>
		<x public="1"><c path="flash.geom.Rectangle.T"/></x>
		<y public="1"><c path="flash.geom.Rectangle.T"/></y>
		<width public="1"><c path="flash.geom.Rectangle.T"/></width>
		<height public="1"><c path="flash.geom.Rectangle.T"/></height>
		<size public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></size>
		<bottomRight public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></bottomRight>
		<topLeft public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></topLeft>
		<equals public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></equals>
		<union public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></union>
		<intersects public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></intersects>
		<intersection public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></intersection>
		<containsRectangle public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></containsRectangle>
		<containsPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<offsetPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></offset>
		<inflatePoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></inflate>
		<isEmpty public="1" set="method"><f a=""><e path="Bool"/></f></isEmpty>
		<setEmpty public="1" set="method"><f a=""><e path="Void"/></f></setEmpty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="x:y:w:h">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.Mouse" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Mouse.hx" extern="1">
		<show public="1" set="method" static="1"><f a=""><c path="Int"/></f></show>
		<hide public="1" set="method" static="1"><f a=""><c path="Int"/></f></hide>
		<onMouseDown public="1" set="dynamic" static="1"><f a=""><e path="Void"/></f></onMouseDown>
		<onMouseMove public="1" set="dynamic" static="1"><f a=""><e path="Void"/></f></onMouseMove>
		<onMouseUp public="1" set="dynamic" static="1"><f a=""><e path="Void"/></f></onMouseUp>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getInnerHTML set="method" line="152"><f a=""><c path="String"/></f></getInnerHTML>
		<getElements set="method" line="159"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.FastCell" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/FastList.hx" module="haxe.FastList">
		<elt public="1"><c path="haxe.FastCell.T"/></elt>
		<next public="1"><c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.FastCell.T"/>
	<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.FastList" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/FastList.hx">
		<head public="1"><c path="haxe.FastCell"><c path="haxe.FastList.T"/></c></head>
		<add public="1" get="inline" set="null" line="60">
			<f a="item">
				<c path="haxe.FastList.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the head of the list.
	</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="68">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="77">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="90">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="98">
			<f a="v">
				<c path="haxe.FastList.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="123">
			<f a=""><t path="Iterator"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="141">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="54">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. A different class is created for each container used in platforms where it matters
</haxe_doc>
	</class>
	<class path="haxe.TimerQueue" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/TimerQueue.hx">
		<delay><c path="Int"/></delay>
		<t><c path="haxe.Timer"/></t>
		<q><c path="Array"><f a=""><e path="Void"/></f></c></q>
		<add public="1" set="method" line="42"><f a="f">
	<f a=""><e path="Void"/></f>
	<e path="Void"/>
</f></add>
		<process set="method" line="50"><f a=""><e path="Void"/></f></process>
		<new public="1" set="method" line="37"><f a="?delay">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.rtti.Meta" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given type (class or enum)
	</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="43" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class fields or enum constructors
	</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<class path="flash.system.Security" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/system/Security.hx" extern="1">
		<allowDomain public="1" set="method" static="1"><f a="domain">
	<c path="String"/>
	<e path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method" static="1"><f a="domain">
	<c path="String"/>
	<e path="Void"/>
</f></allowInsecureDomain>
		<loadPolicyFile public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></loadPolicyFile>
		<sandboxType public="1" set="null" static="1"><c path="String"/></sandboxType>
	</class>
	<class path="flash.Key" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Key.hx" extern="1">
		<ALT public="1" line="12" static="1"><c path="Int"/></ALT>
		<ENTER public="1" line="13" static="1"><c path="Int"/></ENTER>
		<SPACE public="1" line="14" static="1"><c path="Int"/></SPACE>
		<UP public="1" line="15" static="1"><c path="Int"/></UP>
		<DOWN public="1" line="16" static="1"><c path="Int"/></DOWN>
		<LEFT public="1" line="17" static="1"><c path="Int"/></LEFT>
		<RIGHT public="1" line="18" static="1"><c path="Int"/></RIGHT>
		<PGUP public="1" line="19" static="1"><c path="Int"/></PGUP>
		<PGDN public="1" line="20" static="1"><c path="Int"/></PGDN>
		<HOME public="1" line="21" static="1"><c path="Int"/></HOME>
		<END public="1" line="22" static="1"><c path="Int"/></END>
		<TAB public="1" line="23" static="1"><c path="Int"/></TAB>
		<CONTROL public="1" line="24" static="1"><c path="Int"/></CONTROL>
		<SHIFT public="1" line="25" static="1"><c path="Int"/></SHIFT>
		<ESCAPE public="1" line="26" static="1"><c path="Int"/></ESCAPE>
		<INSERT public="1" line="27" static="1"><c path="Int"/></INSERT>
		<DELETEKEY public="1" line="28" static="1"><c path="Int"/></DELETEKEY>
		<BACKSPACE public="1" line="29" static="1"><c path="Int"/></BACKSPACE>
		<CAPSLOCK public="1" line="30" static="1"><c path="Int"/></CAPSLOCK>
		<getAscii public="1" set="method" static="1"><f a=""><c path="Int"/></f></getAscii>
		<getCode public="1" set="method" static="1"><f a=""><c path="Int"/></f></getCode>
		<isAccessible public="1" set="method" static="1"><f a=""><e path="Bool"/></f></isAccessible>
		<isDown public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<e path="Bool"/>
</f></isDown>
		<isToggled public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<e path="Bool"/>
</f></isToggled>
		<onKeyDown public="1" set="dynamic" static="1"><f a=""><e path="Void"/></f></onKeyDown>
		<onKeyUp public="1" set="dynamic" static="1"><f a=""><e path="Void"/></f></onKeyUp>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
	</class>
	<enum path="Void" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/Applications/FDT/haXe/haxe-2.07-osx/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<enum path="haxe.macro.Position" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"/>
	<enum path="haxe.macro.Constant" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpIDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="e"><t path="Null"><t path="haxe.macro.Expr"/></t></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="f"><t path="haxe.macro.Function"/></EFunction>
		<EFor a="v:it:expr">
			<c path="String"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub><t path="Null"><c path="String"/></t></sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPConst a="c"><e path="haxe.macro.Constant"/></TPConst>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<name><t path="Null"><c path="String"/></t></name>
	<expr><t path="haxe.macro.Expr"/></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value><t path="Null"><t path="haxe.macro.Expr"/></t></value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Field" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.FieldType"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<isPublic><t path="Null"><e path="Bool"/></t></isPublic>
</a></typedef>
	<enum path="haxe.macro.FieldType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t"><e path="haxe.macro.ComplexType"/></FVar>
		<FProp a="t:get:set">
			<e path="haxe.macro.ComplexType"/>
			<c path="String"/>
			<c path="String"/>
		</FProp>
		<FFun a="args:ret">
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.ComplexType"/>
		</FFun>
	</enum>
	<enum path="haxe.io.Error" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<typedef path="haxe.TypeResolver" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<c path="Enum"><d/></c>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<c path="Class"><d/></c>
</f></resolveClass>
</a></typedef>
	<class path="haxe.Unserializer" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="34" static="1"><t path="haxe.TypeResolver"/></DEFAULT_RESOLVER>
		<BASE64 line="36" static="1"><c path="String"/></BASE64>
		<CODES line="39" static="1"><c path="Array"><c path="Int"/></c></CODES>
		<initCodes set="method" line="41" static="1"><f a=""><c path="Array"><c path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="351" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Unserialize a single value and return it.
	</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><c path="Int"/></pos>
		<length><c path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="76"><f a="r">
	<t path="haxe.TypeResolver"/>
	<e path="Void"/>
</f></setResolver>
		<getResolver public="1" set="method" line="86"><f a=""><t path="haxe.TypeResolver"/></f></getResolver>
		<get get="inline" set="null" line="90"><f a="p">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<readDigits set="method" line="94"><f a=""><c path="Int"/></f></readDigits>
		<unserializeObject set="method" line="119"><f a="o">
	<a/>
	<e path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="134"><f a="edecl:tag">
	<c path="Enum"><d/></c>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="155"><f a=""><d/></f></unserialize>
		<new public="1" set="method" line="64"><f a="buf">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.IME" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/system/IME.hx" extern="1">
		<ALPHANUMERIC_FULL public="1" static="1"><c path="String"/></ALPHANUMERIC_FULL>
		<ALPHANUMERIC_HALF public="1" static="1"><c path="String"/></ALPHANUMERIC_HALF>
		<CHINESE public="1" static="1"><c path="String"/></CHINESE>
		<JAPANESE_HIRAGANA public="1" static="1"><c path="String"/></JAPANESE_HIRAGANA>
		<JAPANESE_KATAKANA_FULL public="1" static="1"><c path="String"/></JAPANESE_KATAKANA_FULL>
		<JAPANESE_KATAKANA_HALF public="1" static="1"><c path="String"/></JAPANESE_KATAKANA_HALF>
		<KOREAN public="1" static="1"><c path="String"/></KOREAN>
		<UNKNOWN public="1" static="1"><c path="String"/></UNKNOWN>
		<getEnabled public="1" set="method" static="1"><f a=""><e path="Bool"/></f></getEnabled>
		<setEnabled public="1" set="method" static="1"><f a="enabled">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEnabled>
		<getConversionMode public="1" set="method" static="1"><f a=""><c path="String"/></f></getConversionMode>
		<setConversionMode public="1" set="method" static="1"><f a="mode">
	<c path="String"/>
	<e path="Bool"/>
</f></setConversionMode>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<e path="Bool"/>
</f></setCompositionString>
		<doConversion public="1" set="method" static="1"><f a=""><e path="Bool"/></f></doConversion>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash.XMLSocket" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/XMLSocket.hx" extern="1">
		<connect public="1" set="method"><f a="url:port">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></connect>
		<send public="1" set="method"><f a="data">
	<d/>
	<e path="Bool"/>
</f></send>
		<close public="1" set="method"><f a=""><e path="Bool"/></f></close>
		<onData public="1" set="dynamic"><f a="src">
	<c path="String"/>
	<e path="Void"/>
</f></onData>
		<onConnect public="1" set="dynamic"><f a="success">
	<e path="Bool"/>
	<e path="Void"/>
</f></onConnect>
		<onClose public="1" set="dynamic"><f a=""><e path="Void"/></f></onClose>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.Http" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/Http.hx">
		<url public="1"><c path="String"/></url>
		<headers><c path="Hash"><c path="String"/></c></headers>
		<params><c path="Hash"><c path="String"/></c></params>
		<setHeader public="1" set="method" line="90"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setHeader>
		<setParameter public="1" set="method" line="94"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setParameter>
		<request public="1" set="method" line="104"><f a="post">
	<e path="Bool"/>
	<e path="Void"/>
</f></request>
		<onData public="1" set="dynamic" line="624"><f a="data">
	<c path="String"/>
	<e path="Void"/>
</f></onData>
		<onError public="1" set="dynamic" line="627"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></onError>
		<onStatus public="1" set="dynamic" line="630"><f a="status">
	<c path="Int"/>
	<e path="Void"/>
</f></onStatus>
		<new public="1" set="method" line="76">
			<f a="url">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * In PHP Https (SSL) connections are allowed only if the OpenSSL extension is enabled.
	 * @param	url
	 </haxe_doc>
		</new>
	</class>
	<class path="flash.Video" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Video.hx" extern="1">
		<deblocking public="1"><c path="Float"/></deblocking>
		<height public="1"><c path="Float"/></height>
		<smoothing public="1"><e path="Bool"/></smoothing>
		<width public="1"><c path="Float"/></width>
		<attachVideo public="1" set="method"><f a="source">
	<d/>
	<e path="Void"/>
</f></attachVideo>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<play public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</play>
		<close public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</stop>
		<pause public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc> flash lite only </haxe_doc>
		</resume>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="73" static="1"><f a="gatewayUrl">
	<c path="String"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></urlConnect>
		<connect public="1" set="method" line="90" static="1"><f a="nc">
	<c path="flash.NetConnection"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></connect>
		<__data><a>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<cnx><c path="flash.NetConnection"/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="52"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="56"><f a=""><e path="Void"/></f></close>
		<call public="1" set="method" line="60"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="41"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<cnx><c path="flash.NetConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.TextSnapshot" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/TextSnapshot.hx" extern="1">
		<findText public="1" set="method"><f a="startIndex:textToFind:caseSensitive">
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></findText>
		<getCount public="1" set="method"><f a=""><c path="Int"/></f></getCount>
		<getSelected public="1" set="method"><f a="start:?end">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<e path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="start:end:?includeLineEndings">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getText>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?closeDist">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="color">
	<c path="Int"/>
	<e path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="start:end:select">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSelected>
	</class>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="76" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="43"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="47"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="32"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="flash.XMLSocket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="68"><f a="c">
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="87"><f a="c">
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="108"><f a="c1:c2">
	<c path="Int"/>
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="116"><f a="len">
	<c path="Int"/>
	<a>
		<c2><t path="Null"><c path="Int"/></t></c2>
		<c1><t path="Null"><c path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="124"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="132"><f a="answer:?isException">
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="142"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="155"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="159"><f a="data">
	<c path="String"/>
	<e path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="167"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="189"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<new public="1" set="method" line="63"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The haXe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the \0 message delimiting char.
	A request string is composed of the following serialized values :
		- the boolean true for a request
		- an array of strings representing the object+method path
		- an array of parameters
	A response string is composed of the following serialized values :
		- the boolean false for a response
		- a serialized value representing the result
	Exceptions are serialized with [serializeException] so they will be thrown immediatly
	when they are unserialized.
</haxe_doc>
	</class>
	<class path="flash.NetStream" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/NetStream.hx" extern="1">
		<bufferLength public="1" set="null"><c path="Float"/></bufferLength>
		<bufferTime public="1" set="null"><c path="Float"/></bufferTime>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<time public="1" set="null"><c path="Float"/></time>
		<currentFps public="1" set="null"><c path="Float"/></currentFps>
		<liveDelay public="1" set="null"><c path="Float"/></liveDelay>
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<haxe_doc> FP9 only </haxe_doc>
		</checkPolicyFile>
		<onMetaData public="1" set="dynamic"><f a="info">
	<d/>
	<e path="Void"/>
</f></onMetaData>
		<onStatus public="1" set="dynamic"><f a="info">
	<d/>
	<e path="Void"/>
</f></onStatus>
		<publish public="1" set="method"><f a="name:?type">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></publish>
		<play public="1" set="method"><f a="name:?start:?len:?reset">
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<d/>
	<e path="Void"/>
</f></play>
		<receiveAudio public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<d/>
	<e path="Void"/>
</f></receiveVideo>
		<pause public="1" set="method"><f a="?flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></pause>
		<seek public="1" set="method"><f a="offset">
	<c path="Float"/>
	<e path="Void"/>
</f></seek>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<attachAudio public="1" set="method"><f a="theMicrophone">
	<c path="flash.Microphone"/>
	<e path="Void"/>
</f></attachAudio>
		<attachVideo public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.Camera"/>
	<c path="Float"/>
	<e path="Void"/>
</f></attachVideo>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<setBufferTime public="1" set="method"><f a="bufferTime">
	<c path="Float"/>
	<e path="Void"/>
</f></setBufferTime>
		<onCuePoint public="1" set="dynamic"><f a="info">
	<d/>
	<e path="Void"/>
</f></onCuePoint>
		<new public="1" set="method"><f a="connection">
	<c path="flash.NetConnection"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="DateTools" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/DateTools.hx">
		<__format_get set="method" line="38" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="91" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Format the date [d] according to the format [f]. The format
		is compatible with the [strftime] standard format, except that there
		is no support in Flash and JS for day and months names (due to lack
		of proper internationalization API). On haXe/Neko/Windows, some
		formats are not supported.
	</haxe_doc>
		</format>
		<delta public="1" set="method" line="129" static="1">
			<f a="d:t">
				<c path="Date"/>
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date which time has been changed by [t] milliseconds.
	</haxe_doc>
		</delta>
		<DAYS_OF_MONTH line="133" static="1"><c path="Array"><c path="Int"/></c></DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="138" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the number of days in a month
	</haxe_doc>
		</getMonthDays>
		<seconds public="1" set="method" line="152" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of seconds to a date-time
	</haxe_doc>
		</seconds>
		<minutes public="1" set="method" line="159" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of minutes to a date-time
	</haxe_doc>
		</minutes>
		<hours public="1" set="method" line="166" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of hours to a date-time
	</haxe_doc>
		</hours>
		<days public="1" set="method" line="173" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of days to a date-time
	</haxe_doc>
		</days>
		<parse public="1" set="method" line="180" static="1">
			<f a="t">
				<c path="Float"/>
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
			</f>
			<haxe_doc>
		Separate a date-time into several components
	</haxe_doc>
		</parse>
		<make public="1" set="method" line="196" static="1">
			<f a="o">
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Build a date-time from several components
	</haxe_doc>
		</make>
		<haxe_doc>
	The DateTools class contains some extra functionalities for [Date]
	manipulation. It's stored in a different class in order to prevent
	the standard [Date] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="flash.Sound" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/Sound.hx" extern="1">
		<duration public="1" set="null"><c path="Float"/></duration>
		<id3 public="1" set="null"><d/></id3>
		<position public="1" set="null"><c path="Float"/></position>
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<haxe_doc> FP9 only </haxe_doc>
		</checkPolicyFile>
		<onLoad public="1" set="dynamic"><f a="success">
	<e path="Bool"/>
	<e path="Void"/>
</f></onLoad>
		<onSoundComplete public="1" set="dynamic"><f a=""><e path="Void"/></f></onSoundComplete>
		<onID3 public="1" set="dynamic"><f a=""><e path="Void"/></f></onID3>
		<getPan public="1" set="method"><f a=""><c path="Float"/></f></getPan>
		<getTransform public="1" set="method"><f a=""><d/></f></getTransform>
		<getVolume public="1" set="method"><f a=""><c path="Float"/></f></getVolume>
		<setPan public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></setPan>
		<setTransform public="1" set="method"><f a="transformObject">
	<d/>
	<e path="Void"/>
</f></setTransform>
		<setVolume public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></setVolume>
		<stop public="1" set="method"><f a="?linkageID">
	<c path="String"/>
	<e path="Void"/>
</f></stop>
		<attachSound public="1" set="method"><f a="id">
	<c path="String"/>
	<e path="Void"/>
</f></attachSound>
		<start public="1" set="method"><f a="?secondOffset:?loops">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></start>
		<loadSound public="1" set="method"><f a="url:isStreaming">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></loadSound>
		<getBytesLoaded public="1" set="method"><f a=""><c path="Float"/></f></getBytesLoaded>
		<getBytesTotal public="1" set="method"><f a=""><c path="Float"/></f></getBytesTotal>
		<new public="1" set="method"><f a="?target">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.LoadVars" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/LoadVars.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<loaded public="1"><e path="Bool"/></loaded>
		<addRequestHeader public="1" set="method"><f a="header:headerValue">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addRequestHeader>
		<load public="1" set="method"><f a="url">
	<c path="String"/>
	<e path="Bool"/>
</f></load>
		<send public="1" set="method"><f a="url:target:?method">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></send>
		<sendAndLoad public="1" set="method"><f a="url:targetObject:?method">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<e path="Bool"/>
</f></sendAndLoad>
		<getBytesLoaded public="1" set="method"><f a=""><c path="Int"/></f></getBytesLoaded>
		<getBytesTotal public="1" set="method"><f a=""><c path="Int"/></f></getBytesTotal>
		<decode public="1" set="method"><f a="queryString">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<onLoad public="1" set="dynamic"><f a="success">
	<e path="Bool"/>
	<e path="Void"/>
</f></onLoad>
		<onData public="1" set="dynamic"><f a="src">
	<c path="String"/>
	<e path="Void"/>
</f></onData>
		<onHTTPStatus public="1" set="dynamic"><f a="status">
	<c path="Int"/>
	<e path="Void"/>
</f></onHTTPStatus>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="flash.filters.DisplacementMapFilter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/filters/DisplacementMapFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><c path="Float"/></color>
		<mode public="1"><c path="String"/></mode>
		<scaleX public="1"><c path="Float"/></scaleX>
		<scaleY public="1"><c path="Float"/></scaleY>
		<componentX public="1"><c path="Float"/></componentX>
		<componentY public="1"><c path="Float"/></componentY>
		<mapPoint public="1"><c path="flash.geom.Point"><c path="Float"/></c></mapPoint>
		<mapBitmap public="1"><c path="flash.display.BitmapData"/></mapBitmap>
		<clone public="1" set="method"><f a=""><c path="flash.filters.DisplacementMapFilter"/></f></clone>
		<new public="1" set="method"><f a="?mapBitmap:?mapPoint:?componentX:?componentY:?scaleX:?scaleY:?mode:?color:?alpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="XmlType" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<convert set="method" line="47" static="1"><f a="o">
	<d/>
	<c path="Xml"/>
</f></convert>
		<parse public="1" set="method" line="67" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createDocument public="1" set="method" line="78" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<createCData public="1" set="method" line="86" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createPCData public="1" set="method" line="93" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createElement public="1" set="method" line="98" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createComment public="1" set="method" line="103" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="108" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="115" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<__x><d/></__x>
		<firstChild public="1" set="method" line="125">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="129">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<setNodeName set="method" line="136"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<setNodeValue set="method" line="142"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<getNodeName set="method" line="148"><f a=""><c path="String"/></f></getNodeName>
		<getNodeValue set="method" line="154"><f a=""><c path="String"/></f></getNodeValue>
		<getParent set="method" line="160"><f a=""><c path="Xml"/></f></getParent>
		<iterator public="1" set="method" line="164">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="180">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="206">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<get public="1" set="method" line="232">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method" line="238">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<exists public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="250">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<attributes public="1" set="method" line="256">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<addChild public="1" set="method" line="262">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="268">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="277">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="285">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<new set="method" line="122"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="59" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<e path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="40"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="44"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="48"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="35"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<e path="Void"/>
</f></ref></a>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Build an AsyncConnection from a synchronized Connection.
</haxe_doc>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/Applications/FDT/haXe/haxe-2.07-osx/std/flash/geom/ColorTransform.hx" extern="1">
		<rgb public="1"><c path="Float"/></rgb>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redOffset public="1"><c path="Float"/></redOffset>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<concat public="1" set="method"><f a="c">
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<new public="1" set="method"><f a="?rm:?gm:?bm:?am:?ro:?go:?bo:?ao">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
</haxe>